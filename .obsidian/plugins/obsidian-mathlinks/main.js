/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MathLinks
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var MathLinks = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      const { vault } = this.app;
      const { workspace } = this.app;
      const statusBarItemEl = this.addStatusBarItem();
      statusBarItemEl.setText("Status Bar Text");
      this.addCommand({
        id: "add-mathlink",
        name: "Add a MathLink to the current file",
        checkCallback: (checking) => {
          const view = workspace.getActiveViewOfType(import_obsidian.MarkdownView);
          if (view) {
            if (getMathLink() == null) {
              if (!checking) {
                new AddMathLink(this.app, (mathLink) => {
                  new import_obsidian.Notice("MathLink added");
                }).open();
              }
              return true;
            }
          }
          return false;
        }
      });
      this.addCommand({
        id: "edit-mathlink",
        name: "Edit the MathLink of the current file",
        checkCallback: (checking) => {
          const view = workspace.getActiveViewOfType(import_obsidian.MarkdownView);
          if (view) {
            if (getMathLink() != null) {
              if (!checking) {
                new EditMathLink(this.app, (mathLink) => {
                  new import_obsidian.Notice("MathLink edited");
                }).open();
              }
              return true;
            }
          }
          return false;
        }
      });
      function getMathLink() {
        const view = workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (view.editor.getLine(0) === "---") {
          let lineNumber = 1;
          while (true) {
            let line = view.editor.getLine(lineNumber);
            if (line.substring(0, 5) === "alias") {
              return line;
            } else if (line === "---") {
              return null;
            } else {
              lineNumber = ++lineNumber;
            }
          }
        }
        return null;
      }
      this.addSettingTab(new SampleSettingTab(this.app, this));
    });
  }
  onunload() {
    return __async(this, null, function* () {
      console.log("Unloaded");
    });
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
var AddMathLink = class extends import_obsidian.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "Add a MathLink to the current file" });
    new import_obsidian.Setting(contentEl).setName("MathLink").addText((text) => text.onChange((value) => {
      this.mathLink = value;
    }));
    new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText("Add").setCta().onClick(() => {
      this.close();
      this.onSubmit(this.mathLink);
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var EditMathLink = class extends import_obsidian.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "Edit the MathLink of the current file" });
    new import_obsidian.Setting(contentEl).setName("MathLink").addText((text) => text.onChange((value) => {
      this.mathLink = value;
    }));
    new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText("Edit").setCta().onClick(() => {
      this.close();
      this.onSubmit(this.mathLink);
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for my awesome plugin." });
    new import_obsidian.Setting(containerEl).setName("Setting #1").setDesc("It's a secret").addText((text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.mySetting).onChange((value) => __async(this, null, function* () {
      console.log("Secret: " + value);
      this.plugin.settings.mySetting = value;
      yield this.plugin.saveSettings();
    })));
  }
};
//# sourceMappingURL=data:application/json;base64,
