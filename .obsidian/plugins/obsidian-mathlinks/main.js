/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MathLinks
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var MathLinks = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      const { vault } = this.app;
      const { workspace } = this.app;
      const { metadataCache } = this.app;
      const { fileManager } = this.app;
      this.addCommand({
        id: "add-mathlink",
        name: "Add a MathLink to the current file",
        checkCallback: (checking) => {
          const view = workspace.getActiveViewOfType(import_obsidian.MarkdownView);
          if (view) {
            let yaml = getYaml(workspace.getActiveFile());
            if (!(yaml instanceof Array)) {
              console.log("Add " + yaml);
              if (!checking) {
                let editor = view.editor;
                if (yaml === null) {
                } else {
                  let currentState = workspace.getLeaf().getViewState();
                  currentState.state.mode = "source";
                  workspace.getLeaf(false).setViewState(currentState);
                  let lineToAppendTo = yaml.to.line - 1;
                  editor.setLine(lineToAppendTo, editor.getLine(lineToAppendTo) + "\nmathLink: ");
                  editor.setCursor(yaml.to.line);
                  editor.focus();
                }
              }
              return true;
            }
          }
          return false;
        }
      });
      this.addCommand({
        id: "edit-mathlink",
        name: "Edit the MathLink of the current file",
        checkCallback: (checking) => {
          const view = workspace.getActiveViewOfType(import_obsidian.MarkdownView);
          if (view) {
            let yaml = getYaml(workspace.getActiveFile());
            if (yaml instanceof Array) {
              console.log("Edit " + yaml);
              if (!checking) {
              }
              return true;
            }
          }
          return false;
        }
      });
      function getYaml(file) {
        let yaml = metadataCache.getFileCache(file).frontmatter;
        if (yaml === void 0)
          return null;
        else {
          let yamlRange = { from: yaml.position.start, to: yaml.position.end };
          if (yaml.mathLink === void 0) {
            return yamlRange;
          } else
            return [yaml.mathLink, yamlRange];
        }
      }
      metadataCache.on("changed", (file, data, cache) => {
        let links = cache.links;
        if (Array.isArray(links)) {
          console.log("All MathLinks of " + file.name + ":");
          links.forEach((link) => {
            let linkPath = fileManager.getNewFileParent(link.link).path;
            let linkFile;
            if (isMathLink(link))
              linkFile = vault.getAbstractFileByPath(linkPath + "/" + link.link);
            else
              linkFile = vault.getAbstractFileByPath(linkPath + "/" + link.link + ".md");
            if (linkFile instanceof import_obsidian.TFile) {
              let mathLink = getYaml(linkFile);
              if (mathLink instanceof Array) {
                console.log(link, mathLink);
                let startPos = { line: link.position.start.line, ch: link.position.start.col };
                let endPos = { line: link.position.end.line, ch: link.position.end.col };
                if (isMathLink(link))
                  updateMathLink(mathLink[0], startPos, endPos);
                else
                  newMathLink(mathLink[0], startPos, endPos);
              }
            }
          });
        }
      });
      function isMathLink(link) {
        return link.displayText === "";
      }
      function updateMathLink(mathLink, startPos, endPos) {
        console.log("Update");
      }
      function newMathLink(mathLink, startPos, endPos) {
        console.log("New");
      }
    });
  }
  onunload() {
    return __async(this, null, function* () {
      console.log("Unloaded");
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
