/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MathLinks
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");

// src/utils.ts
function formatToRegex(str) {
  return str.replace(/\s/g, "\\s").replace(/\./g, "\\.").replace(/\(/g, "\\(").replace(/\)/g, "\\)").replace(/\{/g, "\\{").replace(/\}/g, "\\}").replace(/\[/g, "\\[").replace(/\]/g, "\\]");
}

// src/settings.ts
var MathLinksSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    return __async(this, null, function* () {
      const { containerEl } = this;
      containerEl.empty();
      containerEl.createEl("h2", { text: "MathLinks Settings" });
      new import_obsidian.Setting(containerEl).setName("Add a new template").setDesc(createFragment((e) => {
        e.createSpan({
          text: "Automatically generate a mathLink with templates. Use "
        });
        e.createEl("code", {
          text: "mathLink: auto"
        });
        e.createSpan({
          text: " to use templates in a file."
        });
      })).addButton((button) => {
        let b = button.setTooltip("Add").setIcon("plus").onClick(() => __async(this, null, function* () {
          let modal = new AddTemplatesModal(this.app);
          modal.onClose = () => __async(this, null, function* () {
            if (modal.saved) {
              const template = {
                title: modal.title,
                replaced: modal.replaced,
                replacement: modal.replacement,
                globalMatch: modal.globalMatch,
                sensitive: modal.sensitive,
                word: modal.word
              };
              this.plugin.settings.templates.push(template);
              yield this.plugin.saveSettings();
              new import_obsidian.Notice("MathLinks: Template added.");
            }
          });
          modal.open();
          this.display();
        }));
        return b;
      });
      let templateTitleToEdit;
      new import_obsidian.Setting(containerEl).setName("Edit template").setDesc("Select a template to edit it.").addDropdown((dropdown) => {
        dropdown.addOption("__select", "Select");
        for (let i = 0; i < this.plugin.settings.templates.length; i++) {
          dropdown.addOption(this.plugin.settings.templates[i].title, this.plugin.settings.templates[i].title);
        }
        dropdown.onChange((current) => __async(this, null, function* () {
          if (current != "__select")
            templateTitleToEdit = current;
          else
            templateTitleToEdit = null;
        }));
      }).addExtraButton((button) => {
        let b = button.setTooltip("Edit").setIcon("edit").onClick(() => __async(this, null, function* () {
          if (templateTitleToEdit) {
            let originalTemplates = JSON.parse(JSON.stringify(this.plugin.settings.templates));
            let modal = new EditTemplatesModal(this.app, templateTitleToEdit, this.plugin.settings.templates);
            modal.onClose = () => __async(this, null, function* () {
              if (modal.saved) {
                yield this.plugin.saveSettings();
                new import_obsidian.Notice("MathLinks: Template saved.");
              } else {
                this.plugin.settings.templates = originalTemplates;
              }
            });
            modal.open();
            this.display();
          } else {
            new import_obsidian.Notice("MathLinks: Please select a template.");
          }
        }));
        return b;
      });
      let templateTitleToDelete;
      new import_obsidian.Setting(containerEl).setName("Delete a template").setDesc("Select a template to delete it.").addDropdown((dropdown) => {
        dropdown.addOption("__select", "Select");
        for (let i = 0; i < this.plugin.settings.templates.length; i++) {
          dropdown.addOption(this.plugin.settings.templates[i].title, this.plugin.settings.templates[i].title);
        }
        dropdown.onChange((current) => __async(this, null, function* () {
          if (current != "__select")
            templateTitleToDelete = current;
          else
            templateTitleToDelete = null;
        }));
      }).addExtraButton((button) => {
        let b = button.setTooltip("Delete").setIcon("trash").onClick(() => __async(this, null, function* () {
          if (templateTitleToDelete) {
            let modal = new DeleteTemplatesModal(this.app, templateTitleToDelete);
            modal.onClose = () => __async(this, null, function* () {
              if (modal.proceed) {
                for (let i = 0; i < this.plugin.settings.templates.length; i++) {
                  if (this.plugin.settings.templates[i].title === templateTitleToDelete) {
                    this.plugin.settings.templates.splice(i, 1);
                    yield this.plugin.saveSettings();
                    new import_obsidian.Notice(`MathLinks: Template '${templateTitleToDelete}' deleted.`);
                    break;
                  }
                }
              }
            });
            modal.open();
            this.display();
          } else {
            new import_obsidian.Notice("MathLinks: Please select a template.");
          }
        }));
        return b;
      });
    });
  }
};
var AddTemplatesModal = class extends import_obsidian.Modal {
  constructor(app) {
    super(app);
    this.saved = false;
    this.title = "";
    this.replaced = "";
    this.replacement = "";
    this.globalMatch = true;
    this.sensitive = true;
    this.word = true;
  }
  onOpen() {
    const { contentEl } = this;
    let titleText;
    new import_obsidian.Setting(contentEl).setName("Title").setDesc("Name of the template.").addText((text) => {
      titleText = text;
      titleText.setValue(this.title).onChange((current) => {
        this.title = current;
      });
    });
    let replacedText;
    new import_obsidian.Setting(contentEl).setName("Replace all ...").setDesc("Strings to be matched and replaced.").addText((text) => {
      replacedText = text;
      replacedText.setValue(this.replaced).onChange((current) => {
        this.replaced = formatToRegex(current);
      });
    });
    let replacementText;
    new import_obsidian.Setting(contentEl).setName("... with").setDesc("String to replace all matches. Do not escape backslashes.").addText((text) => {
      replacementText = text;
      replacementText.setValue(this.replacement).onChange((current) => {
        this.replacement = current;
      });
    });
    new import_obsidian.Setting(contentEl).setName("Global").setDesc("Match all instances (instead of just the first).").addToggle((toggle) => {
      toggle.setValue(true).onChange((current) => this.globalMatch = current);
    });
    new import_obsidian.Setting(contentEl).setName("Case sensitive").setDesc("Matches will be case sensitive.").addToggle((toggle) => {
      toggle.setValue(true).onChange((current) => this.sensitive = current);
    });
    new import_obsidian.Setting(contentEl).setName("Whole word").setDesc("Only match whole words.").addToggle((toggle) => {
      toggle.setValue(true).onChange((current) => this.word = current);
    });
    let footerEl = contentEl.createDiv();
    let footerButtons = new import_obsidian.Setting(footerEl);
    footerButtons.addButton((b) => {
      b.setTooltip("Save").setIcon("checkmark").onClick(() => __async(this, null, function* () {
        this.saved = true;
        this.close();
      }));
      return b;
    });
    footerButtons.addExtraButton((b) => {
      b.setTooltip("Cancel").setIcon("cross").onClick(() => {
        this.saved = false;
        this.close();
      });
      return b;
    });
  }
};
var EditTemplatesModal = class extends import_obsidian.Modal {
  constructor(app, templateTitle, templates) {
    super(app);
    this.saved = false;
    this.templateTitle = templateTitle;
    this.templates = templates;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    for (let i = 0; i < this.templates.length; i++) {
      if (this.templateTitle != void 0 && this.templates[i].title === this.templateTitle) {
        let titleText;
        new import_obsidian.Setting(contentEl).setName("Title").setDesc("Name of the template.").addText((text) => {
          titleText = text;
          titleText.setValue(this.templates[i].title).onChange((current) => {
            this.templates[i].title = current;
          });
        });
        let replacedText;
        new import_obsidian.Setting(contentEl).setName("Replace all ...").setDesc("Strings to be matched and replaced.").addText((text) => {
          replacedText = text;
          replacedText.setValue(this.templates[i].replaced).onChange((current) => {
            this.templates[i].replaced = current;
          });
        });
        let replacementText;
        new import_obsidian.Setting(contentEl).setName("... with").setDesc("String to replace all matches. Do not escape backslashes.").addText((text) => {
          replacementText = text;
          replacementText.setValue(this.templates[i].replacement).onChange((current) => {
            this.templates[i].replacement = current;
          });
        });
        new import_obsidian.Setting(contentEl).setName("Global").setDesc("Match all instances (instead of just the first)").addToggle((toggle) => {
          toggle.setValue(this.templates[i].globalMatch).onChange((current) => this.templates[i].globalMatch = current);
        });
        new import_obsidian.Setting(contentEl).setName("Case sensitive").setDesc("Matches will be case sensitive.").addToggle((toggle) => {
          toggle.setValue(this.templates[i].sensitive).onChange((current) => this.templates[i].sensitive = current);
        });
        new import_obsidian.Setting(contentEl).setName("Whole word").setDesc("Only match whole words.").addToggle((toggle) => {
          toggle.setValue(this.templates[i].sensitive).onChange((current) => this.templates[i].word = current);
        });
        break;
      }
    }
    let footerEl = contentEl.createDiv();
    let footerButtons = new import_obsidian.Setting(footerEl);
    footerButtons.addButton((b) => {
      b.setTooltip("Save").setIcon("checkmark").onClick(() => __async(this, null, function* () {
        this.saved = true;
        this.close();
      }));
      return b;
    });
    footerButtons.addExtraButton((b) => {
      b.setTooltip("Cancel").setIcon("cross").onClick(() => {
        this.saved = false;
        this.close();
      });
      return b;
    });
  }
};
var DeleteTemplatesModal = class extends import_obsidian.Modal {
  constructor(app, templateTitle) {
    super(app);
    this.proceed = false;
    this.templateTitle = templateTitle;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h3", { text: `Are you sure you want to delete '${this.templateTitle}'?` });
    let footerEl = contentEl.createDiv();
    let footerButtons = new import_obsidian.Setting(footerEl);
    footerButtons.addButton((b) => {
      b.setTooltip("Yes").setIcon("checkmark").onClick(() => __async(this, null, function* () {
        this.proceed = true;
        this.close();
      }));
      return b;
    });
    footerButtons.addExtraButton((b) => {
      b.setTooltip("Cancel").setIcon("cross").onClick(() => {
        this.proceed = false;
        this.close();
      });
      return b;
    });
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  templates: []
};
var MathLinks = class extends import_obsidian2.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      const settings = this.settings;
      const { vault } = this.app;
      const { workspace } = this.app;
      const { metadataCache } = this.app;
      const { fileManager } = this.app;
      metadataCache.on("changed", (file, data, cache) => __async(this, null, function* () {
        console.log(file.name);
        let mathLink = yield getMathLink(file);
        if (mathLink != null && mathLink != void 0) {
          let backLinkFilePaths = getBackLinkFilePaths(file);
          if (backLinkFilePaths.length != 0) {
            backLinkFilePaths.forEach((backLinkFilePath) => __async(this, null, function* () {
              let backLinkFile = vault.getAbstractFileByPath(backLinkFilePath);
              if (backLinkFile instanceof import_obsidian2.TFile) {
                let backLinkFileContent = yield vault.read(backLinkFile);
                let modified2 = convertToMathLinks(file.name, backLinkFileContent, mathLink[0]);
                if (backLinkFileContent != modified2) {
                  vault.modify(backLinkFile, modified2);
                }
              }
            }));
          }
        }
        let fileContent = yield vault.read(file);
        let modified = fileContent;
        if (cache.links != void 0) {
          cache.links.forEach((outLink) => __async(this, null, function* () {
            let outLinkFileName = outLink.link;
            if (outLink.displayText != "")
              outLinkFileName = outLinkFileName.replace(/$/, ".md");
            let outLinkFilePath = fileManager.getNewFileParent(outLinkFileName).path + "/" + outLinkFileName;
            let outLinkFile = vault.getAbstractFileByPath(outLinkFilePath);
            if (outLinkFile instanceof import_obsidian2.TFile) {
              let outLinkMathLink = yield getMathLink(outLinkFile);
              if (outLinkMathLink != null && outLinkMathLink != void 0) {
                modified = convertToMathLinks(outLinkFileName, modified, outLinkMathLink[0]);
                if (fileContent != modified) {
                  yield vault.modify(file, modified);
                }
              }
            }
          }));
        }
      }));
      function getMathLink(file) {
        return __async(this, null, function* () {
          let contents = yield vault.read(file);
          contents = contents.split(/\r?\n/);
          if (contents[0] === "---") {
            for (let lineNumber = 1; lineNumber < contents.length; lineNumber++) {
              let line = contents[lineNumber];
              if (line.length < 10) {
                lineNumber++;
              } else {
                let key = line.substring(0, 10);
                if (key === "mathLink: ") {
                  let value = line.replace(key, "");
                  if (value != "") {
                    if (value === "auto") {
                      let mathLink = yield generateMathLinkFromAuto(file);
                      return [mathLink, lineNumber];
                    }
                    return [value, lineNumber];
                  } else {
                    return [null, lineNumber];
                  }
                } else if (line === "---") {
                  return void 0;
                } else {
                  lineNumber++;
                }
              }
            }
          }
          return void 0;
        });
      }
      function getBackLinkFilePaths(file) {
        let backLinkFilePaths = [];
        Object.keys(metadataCache.resolvedLinks).forEach((key) => {
          let links = metadataCache.resolvedLinks[key];
          Object.keys(links).forEach((link) => {
            if (link === file.path) {
              backLinkFilePaths.push(key);
            }
          });
        });
        return backLinkFilePaths;
      }
      function generateMathLinkFromAuto(file) {
        return __async(this, null, function* () {
          let templates = settings.templates;
          let baseName = file.name.replace(".md", "");
          let mathLink = baseName;
          for (let i = 0; i < templates.length; i++) {
            let replaced = new RegExp(formatToRegex(templates[i].replaced));
            let replacement = templates[i].replacement;
            let flags = "";
            if (templates[i].globalMatch)
              flags += "g";
            if (!templates[i].sensitive)
              flags += "i";
            if (templates[i].word)
              replaced = RegExp(replaced.source.replace(/^/, "\\b").replace(/$/, "\\b"), flags);
            else
              replaced = RegExp(replaced.source, flags);
            mathLink = mathLink.replace(replaced, replacement);
          }
          return mathLink;
        });
      }
      function convertToMathLinks(fileName, fileContent, mathLink) {
        let left = mathLink.replace(/^/, "[").replace(/$/, "]");
        let right = fileName.replace(/^/, "(").replace(/$/, ")").replace(/\s/g, "%20");
        let newLink = `${left}${right}`;
        let mixedLink = new RegExp("\\[((?!\\]\\(|\\]\\]).)*\\]" + formatToRegex(right), "g");
        let doubleLink = new RegExp(formatToRegex(fileName.replace(/^/, "[[").replace(/\.md$/, "]]")), "g");
        return fileContent.replace(mixedLink, newLink).replace(doubleLink, newLink);
      }
      this.addSettingTab(new MathLinksSettingTab(this.app, this));
    });
  }
  onunload() {
    return __async(this, null, function* () {
      console.log("Unloaded");
    });
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
