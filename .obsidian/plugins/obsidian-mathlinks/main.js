/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MathLinks
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  templates: [],
  excludedFilePaths: [],
  autoUpdate: true
};
var MathLinksSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    return __async(this, null, function* () {
      const { containerEl } = this;
      containerEl.empty();
      containerEl.createEl("h2", { text: "MathLinks Settings" });
      new import_obsidian.Setting(containerEl).setName("Update when modified").setDesc("Automatically update links in the current file when modified.").addToggle((toggle) => {
        toggle.setValue(this.plugin.settings.autoUpdate).onChange((current) => __async(this, null, function* () {
          this.plugin.settings.autoUpdate = current;
          yield this.plugin.saveSettings();
        }));
      });
      new import_obsidian.Setting(containerEl).setName("Add a new template").setDesc(createFragment((e) => {
        e.createSpan({
          text: "Generate mathLinks with a new template. Use "
        });
        e.createEl("code", {
          text: "mathLink: auto"
        });
        e.createSpan({
          text: " to use templates in a file."
        });
      })).addButton((button) => {
        let b = button.setTooltip("Add").setIcon("plus").onClick(() => __async(this, null, function* () {
          let modal = new AddTemplatesModal(this.app);
          modal.onClose = () => __async(this, null, function* () {
            if (modal.saved) {
              const template = {
                title: modal.title,
                replaced: modal.replaced,
                replacement: modal.replacement,
                globalMatch: modal.globalMatch,
                sensitive: modal.sensitive,
                word: modal.word
              };
              this.plugin.settings.templates.push(template);
              yield this.plugin.saveSettings();
              this.plugin.updateAutoNotes();
              new import_obsidian.Notice("MathLinks: Template added.");
            }
          });
          modal.open();
          this.display();
        }));
        return b;
      });
      let templateTitle;
      new import_obsidian.Setting(containerEl).setName("Edit/delete template").setDesc("Select a template to edit/delete it.").addDropdown((dropdown) => {
        dropdown.addOption("__select", "Select");
        this.plugin.settings.templates.forEach((template) => {
          dropdown.addOption(template.title, template.title);
        });
        dropdown.onChange((current) => __async(this, null, function* () {
          if (current != "__select")
            templateTitle = current;
          else
            templateTitle = null;
        }));
      }).addExtraButton((button) => {
        let b = button.setTooltip("Edit").setIcon("edit").onClick(() => __async(this, null, function* () {
          if (templateTitle) {
            let originalTemplates = JSON.parse(JSON.stringify(this.plugin.settings.templates));
            let modal = new EditTemplatesModal(this.app, templateTitle, this.plugin.settings.templates);
            modal.onClose = () => __async(this, null, function* () {
              if (modal.saved) {
                yield this.plugin.saveSettings();
                this.plugin.updateAutoNotes();
                new import_obsidian.Notice("MathLinks: Template saved.");
              } else {
                this.plugin.settings.templates = originalTemplates;
              }
            });
            modal.open();
            this.display();
          } else {
            new import_obsidian.Notice("MathLinks: Please select a template.");
          }
        }));
        return b;
      }).addExtraButton((button) => {
        let b = button.setTooltip("Delete").setIcon("trash").onClick(() => __async(this, null, function* () {
          if (templateTitle) {
            let modal = new DeleteModal(this.app, `Are you sure you want to delete '${templateTitle}'?`);
            modal.onClose = () => __async(this, null, function* () {
              if (modal.saved) {
                for (let i = 0; i < this.plugin.settings.templates.length; i++) {
                  if (this.plugin.settings.templates[i].title === templateTitle) {
                    this.plugin.settings.templates.splice(i, 1);
                    yield this.plugin.saveSettings();
                    new import_obsidian.Notice(`MathLinks: Template '${templateTitle}' deleted.`);
                    break;
                  }
                }
              }
            });
            modal.open();
            this.display();
          } else {
            new import_obsidian.Notice("MathLinks: Please select a template.");
          }
        }));
        return b;
      });
      new import_obsidian.Setting(containerEl).setName("Add an excluded file").setDesc("MathLinks will ignore those files.").addButton((button) => {
        let b = button.setTooltip("Add").setIcon("plus").onClick(() => __async(this, null, function* () {
          let modal = new AddExcludedModal(this.app);
          modal.onClose = () => __async(this, null, function* () {
            if (modal.saved) {
              const excludedFilePath2 = {
                path: modal.excludedFilePath,
                isFile: modal.isFile
              };
              this.plugin.settings.excludedFilePaths.push(excludedFilePath2);
              yield this.plugin.saveSettings();
              if (modal.isFile)
                new import_obsidian.Notice("MathLinks: File excluded.");
              else
                new import_obsidian.Notice("MathLinks: Path exclcuded.");
            }
          });
          modal.open();
          this.display();
        }));
        return b;
      });
      let excludedFilePath;
      new import_obsidian.Setting(containerEl).setName("Remove from excluded files").setDesc("Remove a file from the list of excluded files.").addDropdown((dropdown) => __async(this, null, function* () {
        dropdown.addOption("__select", "Select");
        this.plugin.settings.excludedFilePaths.forEach((excludedFilePath2) => {
          dropdown.addOption(excludedFilePath2.path, excludedFilePath2.path);
        });
        dropdown.onChange((current) => __async(this, null, function* () {
          if (current != "__select")
            excludedFilePath = current;
          else
            excludedFilePath = null;
        }));
      })).addExtraButton((button) => {
        let b = button.setTooltip("Remove").setIcon("trash").onClick(() => __async(this, null, function* () {
          if (excludedFilePath) {
            let modal = new DeleteModal(this.app, `Are you sure you want to remove '${excludedFilePath}' from the list of excluded files/paths?`);
            modal.onClose = () => __async(this, null, function* () {
              if (modal.saved) {
                for (let i = 0; i < this.plugin.settings.excludedFilePaths.length; i++) {
                  if (this.plugin.settings.excludedFilePaths[i].path === excludedFilePath) {
                    this.plugin.settings.excludedFilePaths.splice(i, 1);
                    yield this.plugin.saveSettings();
                    new import_obsidian.Notice(`MathLinks: '${excludedFilePath}' removed from excluded files.`);
                    break;
                  }
                }
              }
            });
            modal.open();
            this.display();
          } else {
            new import_obsidian.Notice("MathLinks: Please select a file.");
          }
        }));
        return b;
      });
    });
  }
};
var AddTemplatesModal = class extends import_obsidian.Modal {
  constructor(app2) {
    super(app2);
    this.saved = false;
    this.proceed = false;
    this.title = "";
    this.replaced = "";
    this.replacement = "";
    this.globalMatch = true;
    this.sensitive = true;
    this.word = true;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    loadTemplateSettings(contentEl, this);
    loadButtonsToClose(this, this.contentEl.createDiv(), true, "Add", "checkmark", "Cancel", "cross");
  }
};
var EditTemplatesModal = class extends import_obsidian.Modal {
  constructor(app2, templateTitle, templates) {
    super(app2);
    this.saved = false;
    this.proceed = false;
    this.templateTitle = templateTitle;
    this.templates = templates;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    this.templates.every((template) => {
      if (this.templateTitle != void 0 && template.title == this.templateTitle) {
        loadTemplateSettings(contentEl, template);
        return false;
      }
      return true;
    });
    loadButtonsToClose(this, this.contentEl.createDiv(), true, "Save", "checkmark", "Cancel", "cross");
  }
};
var AddExcludedModal = class extends import_obsidian.Modal {
  constructor(app2) {
    super(app2);
    this.saved = false;
    this.proceed = false;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    let excludedFilePathText;
    new import_obsidian.Setting(contentEl).setName("File name/path of folder").setDesc(createFragment((e) => {
      e.createSpan({
        text: "Enter a file as"
      });
      e.createEl("code", {
        text: "path/name.md"
      });
      e.createSpan({
        text: " and a folder as "
      });
      e.createEl("code", {
        text: "path"
      });
      e.createSpan({
        text: "."
      });
    })).addText((text) => {
      excludedFilePathText = text;
      let footerEl = this.contentEl.createDiv();
      loadButtonsToClose(this, footerEl, this.proceed, "Add", "checkmark", "Cancel", "cross");
      excludedFilePathText.setValue(excludedFilePathText).onChange((current) => {
        let file = app.vault.getAbstractFileByPath(current);
        if (file != null) {
          this.excludedFilePath = file.path;
          this.isFile = file instanceof import_obsidian.TFile;
          this.proceed = true;
        } else {
          this.proceed = false;
        }
        footerEl.empty();
        loadButtonsToClose(this, footerEl, this.proceed, "Add", "checkmark", "Cancel", "cross");
      });
    });
  }
};
var DeleteModal = class extends import_obsidian.Modal {
  constructor(app2, areYouSure) {
    super(app2);
    this.saved = false;
    this.proceed = false;
    this.areYouSure = areYouSure;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h3", { text: this.areYouSure });
    loadButtonsToClose(this, this.contentEl.createDiv(), true, "Yes", "checkmark", "No", "cross");
  }
};
function loadTemplateSettings(contentEl, template) {
  let titleText;
  new import_obsidian.Setting(contentEl).setName("Title").setDesc("Name of the template.").addText((text) => {
    titleText = text;
    titleText.setValue(template.title).onChange((current) => {
      template.title = current;
    });
  });
  let replacedText;
  new import_obsidian.Setting(contentEl).setName("Match for...").setDesc("String to be matched and replaced. Do not include regex.").addText((text) => {
    replacedText = text;
    replacedText.setValue(template.replaced).onChange((current) => {
      template.replaced = current;
    });
  });
  let replacementText;
  new import_obsidian.Setting(contentEl).setName("Replace with...").setDesc("String to replace matches. Do not escape backslashes.").addText((text) => {
    replacementText = text;
    replacementText.setValue(template.replacement).onChange((current) => {
      template.replacement = current;
    });
  });
  new import_obsidian.Setting(contentEl).setName("Global match").setDesc("Match all instances (instead of just the first).").addToggle((toggle) => {
    toggle.setValue(template.globalMatch).onChange((current) => template.globalMatch = current);
  });
  new import_obsidian.Setting(contentEl).setName("Case sensitive").setDesc("Matches will be case sensitive.").addToggle((toggle) => {
    toggle.setValue(template.sensitive).onChange((current) => template.sensitive = current);
  });
  new import_obsidian.Setting(contentEl).setName("Match whole words").setDesc("Only match whole words.").addToggle((toggle) => {
    toggle.setValue(template.word).onChange((current) => template.word = current);
  });
}
function loadButtonsToClose(modal, element, proceed, trueToolTip, trueIcon, falseToolTip, falseIcon) {
  let footerButtons = new import_obsidian.Setting(element);
  footerButtons.addButton((b) => {
    b.setTooltip(trueToolTip).setIcon(trueIcon).onClick(() => __async(this, null, function* () {
      if (!proceed) {
        new import_obsidian.Notice("MathLinks: Please enter a valid path/file.");
      } else {
        modal.saved = true;
        modal.close();
      }
    }));
  });
  footerButtons.addExtraButton((b) => {
    b.setTooltip(falseToolTip).setIcon(falseIcon).onClick(() => __async(this, null, function* () {
      modal.saved = false;
      modal.close();
    }));
  });
}

// src/utils.ts
function formatRegex(str) {
  return str.replace(/\s/g, "\\s").replace(/\./g, "\\.").replace(/\(/g, "\\(").replace(/\)/g, "\\)").replace(/\{/g, "\\{").replace(/\}/g, "\\}").replace(/\[/g, "\\[").replace(/\]/g, "\\]");
}
function isExcluded(file, excludedFilePaths) {
  for (let i = 0; i < excludedFilePaths.length; i++) {
    let path = excludedFilePaths[i];
    if (path.isFile && file.path === path.path) {
      return true;
    } else if (!path.isFile) {
      let pathRegex = new RegExp(`\\b${path.path}/`);
      if (pathRegex.test(file.path)) {
        return true;
      }
    }
  }
  return false;
}
function getIncludedNotes(allNotes, excludedFilePaths) {
  let allIncludedNotes = [];
  allNotes.forEach((note) => {
    if (!isExcluded(note, excludedFilePaths))
      allIncludedNotes.push(note);
  });
  return allIncludedNotes;
}

// src/main.ts
var MathLinks = class extends import_obsidian2.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addSettingTab(new MathLinksSettingTab(this.app, this));
      const settings = this.settings;
      this.app.metadataCache.on("changed", (file, data, cache) => __async(this, null, function* () {
        if (settings.autoUpdate) {
          if (isExcluded(file, settings.excludedFilePaths))
            return null;
          let mathLink = yield this.getMathLink(file);
          if (mathLink != null && mathLink != void 0)
            this.updateBackLinks(file, mathLink[0]);
          else
            this.removeBackMathLinks(file);
          this.updateOutLinks(file);
        }
      }));
      this.addCommand({
        id: "update_all_mathlinks",
        name: "Update all links",
        callback: () => __async(this, null, function* () {
          let allNotes = yield this.app.vault.getMarkdownFiles();
          let allIncludedNotes = getIncludedNotes(allNotes, settings.excludedFilePaths);
          let updateNotice = new Notice("MathLinks: Updating...");
          let count = 0;
          allIncludedNotes.forEach((note) => __async(this, null, function* () {
            let mathLink = yield this.getMathLink(note);
            if (mathLink != null && mathLink != void 0)
              this.updateBackLinks(note, mathLink[0]);
            else
              this.removeBackMathLinks(note);
            this.updateOutLinks(note);
            count++;
            updateNotice.setMessage(`MathLinks: Updating... ${count}/${allIncludedNotes.length}`);
            if (count === allIncludedNotes.length) {
              updateNotice.hide();
              new Notice("MathLinks: Updated all links.");
            }
          }));
        })
      });
    });
  }
  getMathLink(file) {
    return __async(this, null, function* () {
      let contents = yield this.app.vault.read(file);
      contents = contents.split(/\r?\n/);
      if (contents[0] === "---") {
        for (let lineNumber = 1; lineNumber < contents.length; lineNumber++) {
          let line = contents[lineNumber];
          if (line.length < 10) {
            lineNumber++;
          } else {
            let key = line.substring(0, 10);
            if (key === "mathLink: ") {
              let value = line.replace(key, "");
              if (value != "") {
                if (value === "auto") {
                  let mathLink = yield this.generateMathLinkFromAuto(file);
                  return [mathLink, true];
                }
                return [value, false];
              } else {
                return null;
              }
            } else if (line === "---") {
              return void 0;
            } else {
              lineNumber++;
            }
          }
        }
      }
      return void 0;
    });
  }
  generateMathLinkFromAuto(file) {
    return __async(this, null, function* () {
      let templates = this.settings.templates;
      let baseName = file.name.replace(".md", "");
      let mathLink = baseName;
      for (let i = 0; i < templates.length; i++) {
        let replaced = new RegExp(formatRegex(templates[i].replaced));
        let replacement = templates[i].replacement;
        let flags = "";
        if (templates[i].globalMatch)
          flags += "g";
        if (!templates[i].sensitive)
          flags += "i";
        if (templates[i].word)
          replaced = RegExp(replaced.source.replace(/^/, "\\b").replace(/$/, "\\b"), flags);
        else
          replaced = RegExp(replaced.source, flags);
        mathLink = mathLink.replace(replaced, replacement);
      }
      return mathLink;
    });
  }
  updateBackLinks(file, mathLink) {
    return __async(this, null, function* () {
      let backLinkFilePaths = this.getBackLinkFilePaths(file);
      if (backLinkFilePaths.length != 0) {
        backLinkFilePaths.forEach((backLinkFilePath) => __async(this, null, function* () {
          let backLinkFile = this.app.vault.getAbstractFileByPath(backLinkFilePath);
          if (backLinkFile instanceof import_obsidian2.TFile) {
            let backLinkFileContent = yield this.app.vault.read(backLinkFile);
            let modified = this.convertToMathLinks(file.name, backLinkFileContent, mathLink);
            if (backLinkFileContent != modified) {
              this.app.vault.modify(backLinkFile, modified);
            }
          }
        }));
      }
    });
  }
  removeBackMathLinks(file) {
    return __async(this, null, function* () {
      let backLinkFilePaths = this.getBackLinkFilePaths(file);
      if (backLinkFilePaths.length != 0) {
        backLinkFilePaths.forEach((backLinkFilePath) => __async(this, null, function* () {
          let backLinkFile = this.app.vault.getAbstractFileByPath(backLinkFilePath);
          if (backLinkFile instanceof import_obsidian2.TFile) {
            let backLinkFileContent = yield this.app.vault.read(backLinkFile);
            let modified = this.convertToDoubleLinks(file.name, backLinkFileContent);
            if (backLinkFileContent != modified) {
              this.app.vault.modify(backLinkFile, modified);
            }
          }
        }));
      }
    });
  }
  updateOutLinks(file) {
    return __async(this, null, function* () {
      let fileContent = yield this.app.vault.read(file);
      let modified = fileContent;
      let outLinks = yield this.app.metadataCache.getFileCache(file).links;
      if (outLinks != void 0) {
        outLinks.forEach((outLink) => __async(this, null, function* () {
          let outLinkFileName = outLink.link;
          if (outLink.displayText != "")
            outLinkFileName = outLinkFileName.replace(/$/, ".md");
          let outLinkFilePath = this.app.fileManager.getNewFileParent(outLinkFileName).path + "/" + outLinkFileName;
          let outLinkFile = this.app.vault.getAbstractFileByPath(outLinkFilePath);
          if (outLinkFile instanceof import_obsidian2.TFile) {
            let outLinkMathLink = yield this.getMathLink(outLinkFile);
            if (outLinkMathLink != null && outLinkMathLink != void 0) {
              modified = this.convertToMathLinks(outLinkFileName, modified, outLinkMathLink[0]);
              if (fileContent != modified) {
                yield this.app.vault.modify(file, modified);
              }
            }
          }
        }));
      }
    });
  }
  updateAutoNotes() {
    return __async(this, null, function* () {
      let allNotes = yield this.app.vault.getMarkdownFiles();
      let allIncludedNotes = getIncludedNotes(allNotes, this.settings.excludedFilePaths);
      allIncludedNotes.forEach((note) => __async(this, null, function* () {
        let mathLink = yield this.getMathLink(note);
        if (mathLink != null && mathLink != void 0) {
          if (mathLink[1]) {
            this.updateBackLinks(note, mathLink[0]);
          }
        } else {
          this.removeBackMathLinks(note);
        }
      }));
    });
  }
  getBackLinkFilePaths(file) {
    let backLinkFilePaths = [];
    Object.keys(this.app.metadataCache.resolvedLinks).forEach((key) => {
      let links = this.app.metadataCache.resolvedLinks[key];
      Object.keys(links).forEach((link) => {
        if (link === file.path) {
          backLinkFilePaths.push(key);
        }
      });
    });
    return backLinkFilePaths;
  }
  convertToMathLinks(fileName, fileContent, mathLink) {
    let left = mathLink.replace(/^/, "[").replace(/$/, "]");
    let right = fileName.replace(/^/, "(").replace(/$/, ")").replace(/\s/g, "%20");
    let newLink = `${left}${right}`;
    let mixedLink = new RegExp("\\[((?!\\]\\(|\\]\\]).)*\\]" + formatRegex(right), "g");
    let doubleLink = new RegExp(formatRegex(fileName.replace(/^/, "[[").replace(/\.md$/, "]]")), "g");
    return fileContent.replace(mixedLink, newLink).replace(doubleLink, newLink);
  }
  convertToDoubleLinks(fileName, fileContent) {
    let formattedName = fileName.replace(/^/, "(").replace(/$/, ")").replace(/\s/g, "%20");
    let mixedLink = new RegExp("\\[((?!\\]\\(|\\]\\]).)*\\]" + formatRegex(formattedName), "g");
    let doubleLink = fileName.replace(/^/, "[[").replace(/\.md$/, "]]");
    return fileContent.replace(mixedLink, doubleLink);
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21haW4udHMiLCAic3JjL3NldHRpbmdzLnRzIiwgInNyYy91dGlscy50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBQbHVnaW4sIFRGaWxlIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgTWF0aExpbmtzU2V0dGluZ3MsIE1hdGhMaW5rc1NldHRpbmdUYWIsIERFRkFVTFRfU0VUVElOR1MgfSBmcm9tICcuL3NldHRpbmdzJztcbmltcG9ydCB7IGZvcm1hdFJlZ2V4LCBpc0V4Y2x1ZGVkLCBnZXRJbmNsdWRlZE5vdGVzIH0gZnJvbSAnLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hdGhMaW5rcyBleHRlbmRzIFBsdWdpbiB7XG4gICAgc2V0dGluZ3M6IE1hdGhMaW5rc1NldHRpbmdzO1xuXG4gICAgYXN5bmMgb25sb2FkKCkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xuICAgICAgICB0aGlzLmFkZFNldHRpbmdUYWIobmV3IE1hdGhMaW5rc1NldHRpbmdUYWIodGhpcy5hcHAsIHRoaXMpKTtcbiAgICAgICAgY29uc3Qgc2V0dGluZ3MgPSB0aGlzLnNldHRpbmdzO1xuXG4gICAgICAgIC8vIFJ1bnMgd2hlbiBmaWxlIGlzIHVwZGF0ZWRcbiAgICAgICAgLy8gV2FudCB0byBtb2RpZnkgaXQgc28gaXQgcnVucyBvbmx5IGlmIGEgbWF0aExpbmsgaXMgdXBkYXRlZC9nZW5lcmF0ZWQgb3IgaWYgYSBsaW5rIGlzIGNyZWF0ZWQuXG4gICAgICAgIHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUub24oJ2NoYW5nZWQnLCBhc3luYyAoZmlsZTogVEZpbGUsIGRhdGE6IHN0cmluZywgY2FjaGU6IENhY2hlZE1ldGFEYXRhKSA9PiB7XG4gICAgICAgICAgICBpZiAoc2V0dGluZ3MuYXV0b1VwZGF0ZSkge1xuICAgICAgICAgICAgICAgIGlmIChpc0V4Y2x1ZGVkKGZpbGUsIHNldHRpbmdzLmV4Y2x1ZGVkRmlsZVBhdGhzKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgICAgICAgICBsZXQgbWF0aExpbmsgPSBhd2FpdCB0aGlzLmdldE1hdGhMaW5rKGZpbGUpO1xuICAgICAgICAgICAgICAgIGlmIChtYXRoTGluayAhPSBudWxsICYmIG1hdGhMaW5rICE9IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVCYWNrTGlua3MoZmlsZSwgbWF0aExpbmtbMF0pO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVCYWNrTWF0aExpbmtzKGZpbGUpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVPdXRMaW5rcyhmaWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gVXBkYXRlIGFsbCBtYXRoTGlua3NcbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgICAgICAgIGlkOiBcInVwZGF0ZV9hbGxfbWF0aGxpbmtzXCIsXG4gICAgICAgICAgICBuYW1lOiBcIlVwZGF0ZSBhbGwgbGlua3NcIixcbiAgICAgICAgICAgIGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGFsbE5vdGVzID0gYXdhaXQgdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuICAgICAgICAgICAgICAgIGxldCBhbGxJbmNsdWRlZE5vdGVzID0gZ2V0SW5jbHVkZWROb3RlcyhhbGxOb3Rlcywgc2V0dGluZ3MuZXhjbHVkZWRGaWxlUGF0aHMpO1xuICAgICAgICAgICAgICAgIGxldCB1cGRhdGVOb3RpY2UgPSBuZXcgTm90aWNlKCdNYXRoTGlua3M6IFVwZGF0aW5nLi4uJyk7XG5cbiAgICAgICAgICAgICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgICAgICAgICAgIGFsbEluY2x1ZGVkTm90ZXMuZm9yRWFjaChhc3luYyAobm90ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbWF0aExpbmsgPSBhd2FpdCB0aGlzLmdldE1hdGhMaW5rKG5vdGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWF0aExpbmsgIT0gbnVsbCAmJiBtYXRoTGluayAhPSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUJhY2tMaW5rcyhub3RlLCBtYXRoTGlua1swXSk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQmFja01hdGhMaW5rcyhub3RlKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZU91dExpbmtzKG5vdGUpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZU5vdGljZS5zZXRNZXNzYWdlKGBNYXRoTGlua3M6IFVwZGF0aW5nLi4uICR7Y291bnR9LyR7YWxsSW5jbHVkZWROb3Rlcy5sZW5ndGh9YCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb3VudCA9PT0gYWxsSW5jbHVkZWROb3Rlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZU5vdGljZS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdNYXRoTGlua3M6IFVwZGF0ZWQgYWxsIGxpbmtzLicpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEdldCBtYXRoTGluayBhcyBzdHJpbmcgKHdpdGggaXNBdXRvKS5cbiAgICAvLyAgICAgSWYga2V5IGV4aXN0cyBidXQgbm90IHZhbHVlLCByZXR1cm4gbnVsbC5cbiAgICAvLyAgICAgVW5kZWZpbmVkIG90aGVyd2lzZS5cbiAgICBhc3luYyBnZXRNYXRoTGluayhmaWxlOiBURmlsZSk6IFtzdHJpbmcsIGJvb2xlYW5dIHwgbnVsbCB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGxldCBjb250ZW50cyA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LnJlYWQoZmlsZSk7XG4gICAgICAgIGNvbnRlbnRzID0gY29udGVudHMuc3BsaXQoL1xccj9cXG4vKTtcblxuICAgICAgICBpZiAoY29udGVudHNbMF0gPT09ICctLS0nKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBsaW5lTnVtYmVyID0gMTsgbGluZU51bWJlciA8IGNvbnRlbnRzLmxlbmd0aDsgbGluZU51bWJlcisrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGxpbmUgPSBjb250ZW50c1tsaW5lTnVtYmVyXTtcbiAgICAgICAgICAgICAgICBpZiAobGluZS5sZW5ndGggPCAxMCkge1xuICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyKys7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGtleSA9IGxpbmUuc3Vic3RyaW5nKDAsIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gJ21hdGhMaW5rOiAnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBsaW5lLnJlcGxhY2Uoa2V5LCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09ICdhdXRvJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWF0aExpbmsgPSBhd2FpdCB0aGlzLmdlbmVyYXRlTWF0aExpbmtGcm9tQXV0byhmaWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFttYXRoTGluaywgdHJ1ZV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbdmFsdWUsIGZhbHNlXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobGluZSA9PT0gJy0tLScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvLyBHZW5lcmF0ZSBtYXRoTGluayBmcm9tIGZpbGUubmFtZVxuICAgIGFzeW5jIGdlbmVyYXRlTWF0aExpbmtGcm9tQXV0byhmaWxlOiBUZmlsZSk6IHN0cmluZyB7XG4gICAgICAgIGxldCB0ZW1wbGF0ZXMgPSB0aGlzLnNldHRpbmdzLnRlbXBsYXRlcztcbiAgICAgICAgbGV0IGJhc2VOYW1lID0gIGZpbGUubmFtZS5yZXBsYWNlKCdcXC5tZCcsICcnKTtcbiAgICAgICAgbGV0IG1hdGhMaW5rID0gYmFzZU5hbWU7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGVtcGxhdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgcmVwbGFjZWQgPSBuZXcgUmVnRXhwKGZvcm1hdFJlZ2V4KHRlbXBsYXRlc1tpXS5yZXBsYWNlZCkpO1xuICAgICAgICAgICAgbGV0IHJlcGxhY2VtZW50ID0gdGVtcGxhdGVzW2ldLnJlcGxhY2VtZW50O1xuXG4gICAgICAgICAgICBsZXQgZmxhZ3MgPSAnJztcbiAgICAgICAgICAgIGlmICh0ZW1wbGF0ZXNbaV0uZ2xvYmFsTWF0Y2gpXG4gICAgICAgICAgICAgICAgZmxhZ3MgKz0gJ2cnO1xuICAgICAgICAgICAgaWYgKCF0ZW1wbGF0ZXNbaV0uc2Vuc2l0aXZlKVxuICAgICAgICAgICAgICAgIGZsYWdzICs9ICdpJztcblxuICAgICAgICAgICAgaWYgKHRlbXBsYXRlc1tpXS53b3JkKVxuICAgICAgICAgICAgICAgIHJlcGxhY2VkID0gUmVnRXhwKHJlcGxhY2VkLnNvdXJjZS5yZXBsYWNlKC9eLywgJ1xcXFxiJykucmVwbGFjZSgvJC8sICdcXFxcYicpLCBmbGFncyk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcmVwbGFjZWQgPSBSZWdFeHAocmVwbGFjZWQuc291cmNlLCBmbGFncyk7XG5cbiAgICAgICAgICAgIG1hdGhMaW5rID0gbWF0aExpbmsucmVwbGFjZShyZXBsYWNlZCwgcmVwbGFjZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXRoTGluaztcbiAgICB9XG5cbiAgICAvLyBVcGRhdGUgYWxsIGxpbmtzIGluIGJhY2tMaW5rRmlsZVxuICAgIGFzeW5jIHVwZGF0ZUJhY2tMaW5rcyhmaWxlOiBURmlsZSwgbWF0aExpbms6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBsZXQgYmFja0xpbmtGaWxlUGF0aHMgPSB0aGlzLmdldEJhY2tMaW5rRmlsZVBhdGhzKGZpbGUpO1xuICAgICAgICBpZiAoYmFja0xpbmtGaWxlUGF0aHMubGVuZ3RoICE9IDApIHtcbiAgICAgICAgICAgIGJhY2tMaW5rRmlsZVBhdGhzLmZvckVhY2goYXN5bmMgKGJhY2tMaW5rRmlsZVBhdGgpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgYmFja0xpbmtGaWxlID0gdGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGJhY2tMaW5rRmlsZVBhdGgpO1xuICAgICAgICAgICAgICAgIGlmIChiYWNrTGlua0ZpbGUgaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgYmFja0xpbmtGaWxlQ29udGVudCA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LnJlYWQoYmFja0xpbmtGaWxlKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1vZGlmaWVkID0gdGhpcy5jb252ZXJ0VG9NYXRoTGlua3MoZmlsZS5uYW1lLCBiYWNrTGlua0ZpbGVDb250ZW50LCBtYXRoTGluayk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGJhY2tMaW5rRmlsZUNvbnRlbnQgIT0gbW9kaWZpZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwLnZhdWx0Lm1vZGlmeShiYWNrTGlua0ZpbGUsIG1vZGlmaWVkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIG1hdGhMaW5rcyBpbiBiYWNrTGlua0ZpbGVcbiAgICBhc3luYyByZW1vdmVCYWNrTWF0aExpbmtzKGZpbGU6IFRGaWxlKTogdm9pZCB7XG4gICAgICAgIGxldCBiYWNrTGlua0ZpbGVQYXRocyA9IHRoaXMuZ2V0QmFja0xpbmtGaWxlUGF0aHMoZmlsZSk7XG4gICAgICAgIGlmIChiYWNrTGlua0ZpbGVQYXRocy5sZW5ndGggIT0gMCkge1xuICAgICAgICAgICAgYmFja0xpbmtGaWxlUGF0aHMuZm9yRWFjaChhc3luYyAoYmFja0xpbmtGaWxlUGF0aCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBiYWNrTGlua0ZpbGUgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoYmFja0xpbmtGaWxlUGF0aCk7XG4gICAgICAgICAgICAgICAgaWYgKGJhY2tMaW5rRmlsZSBpbnN0YW5jZW9mIFRGaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBiYWNrTGlua0ZpbGVDb250ZW50ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZChiYWNrTGlua0ZpbGUpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbW9kaWZpZWQgPSB0aGlzLmNvbnZlcnRUb0RvdWJsZUxpbmtzKGZpbGUubmFtZSwgYmFja0xpbmtGaWxlQ29udGVudCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGJhY2tMaW5rRmlsZUNvbnRlbnQgIT0gbW9kaWZpZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwLnZhdWx0Lm1vZGlmeShiYWNrTGlua0ZpbGUsIG1vZGlmaWVkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gVXBkYXRlIG91dExpbmtzIGluIGZpbGVcbiAgICBhc3luYyB1cGRhdGVPdXRMaW5rcyhmaWxlOiBURmlsZSk6IHZvaWQge1xuICAgICAgICBsZXQgZmlsZUNvbnRlbnQgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5yZWFkKGZpbGUpO1xuICAgICAgICBsZXQgbW9kaWZpZWQgPSBmaWxlQ29udGVudDtcblxuICAgICAgICBsZXQgb3V0TGlua3MgPSBhd2FpdCB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKS5saW5rcztcbiAgICAgICAgaWYgKG91dExpbmtzICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgb3V0TGlua3MuZm9yRWFjaChhc3luYyAob3V0TGluaykgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBvdXRMaW5rRmlsZU5hbWUgPSBvdXRMaW5rLmxpbms7XG4gICAgICAgICAgICAgICAgaWYgKG91dExpbmsuZGlzcGxheVRleHQgIT0gXCJcIilcbiAgICAgICAgICAgICAgICAgICAgb3V0TGlua0ZpbGVOYW1lID0gb3V0TGlua0ZpbGVOYW1lLnJlcGxhY2UoLyQvLCAnLm1kJyk7XG5cbiAgICAgICAgICAgICAgICBsZXQgb3V0TGlua0ZpbGVQYXRoID0gdGhpcy5hcHAuZmlsZU1hbmFnZXIuZ2V0TmV3RmlsZVBhcmVudChvdXRMaW5rRmlsZU5hbWUpLnBhdGggKyAnLycgKyBvdXRMaW5rRmlsZU5hbWU7XG4gICAgICAgICAgICAgICAgbGV0IG91dExpbmtGaWxlID0gdGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKG91dExpbmtGaWxlUGF0aCk7XG5cbiAgICAgICAgICAgICAgICBpZiAob3V0TGlua0ZpbGUgaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgb3V0TGlua01hdGhMaW5rID0gYXdhaXQgdGhpcy5nZXRNYXRoTGluayhvdXRMaW5rRmlsZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvdXRMaW5rTWF0aExpbmsgIT0gbnVsbCAmJiBvdXRMaW5rTWF0aExpbmsgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RpZmllZCA9IHRoaXMuY29udmVydFRvTWF0aExpbmtzKG91dExpbmtGaWxlTmFtZSwgbW9kaWZpZWQsIG91dExpbmtNYXRoTGlua1swXSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxlQ29udGVudCAhPSBtb2RpZmllZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYXBwLnZhdWx0Lm1vZGlmeShmaWxlLCBtb2RpZmllZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJ1bnMgd2hlbiB0ZW1wbGF0ZSBpcyBtb2RpZmllZFxuICAgIGFzeW5jIHVwZGF0ZUF1dG9Ob3RlcygpOiB2b2lkIHtcbiAgICAgICAgbGV0IGFsbE5vdGVzID0gYXdhaXQgdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuICAgICAgICBsZXQgYWxsSW5jbHVkZWROb3RlcyA9IGdldEluY2x1ZGVkTm90ZXMoYWxsTm90ZXMsIHRoaXMuc2V0dGluZ3MuZXhjbHVkZWRGaWxlUGF0aHMpO1xuICAgICAgICBhbGxJbmNsdWRlZE5vdGVzLmZvckVhY2goYXN5bmMgKG5vdGUpID0+IHtcbiAgICAgICAgICAgIGxldCBtYXRoTGluayA9IGF3YWl0IHRoaXMuZ2V0TWF0aExpbmsobm90ZSk7XG4gICAgICAgICAgICBpZiAobWF0aExpbmsgIT0gbnVsbCAmJiBtYXRoTGluayAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAobWF0aExpbmtbMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVCYWNrTGlua3Mobm90ZSwgbWF0aExpbmtbMF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVCYWNrTWF0aExpbmtzKG5vdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBHZW5lcmF0ZSBiYWNrTGlua0ZpbGVQYXRocyBvZiBmaWxlXG4gICAgZ2V0QmFja0xpbmtGaWxlUGF0aHMoZmlsZTogVGZpbGUpOiBzdHJpbmdbXSB7XG4gICAgICAgIGxldCBiYWNrTGlua0ZpbGVQYXRoczogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5hcHAubWV0YWRhdGFDYWNoZS5yZXNvbHZlZExpbmtzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICAgIGxldCBsaW5rcyA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUucmVzb2x2ZWRMaW5rc1trZXldO1xuICAgICAgICAgICAgT2JqZWN0LmtleXMobGlua3MpLmZvckVhY2goKGxpbmspID0+IHtcbiAgICAgICAgICAgICAgICBpZiAobGluayA9PT0gZmlsZS5wYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tMaW5rRmlsZVBhdGhzLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGJhY2tMaW5rRmlsZVBhdGhzO1xuICAgIH1cblxuICAgIC8vIENvbnZlcnQgbWl4ZWQgYW5kIGRvdWJsZSBsaW5rcyB0byBtYXRoTGlua3NcbiAgICBjb252ZXJ0VG9NYXRoTGlua3MoZmlsZU5hbWU6IHN0cmluZywgZmlsZUNvbnRlbnQ6IHN0cmluZywgbWF0aExpbms6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIGxldCBsZWZ0ID0gbWF0aExpbmsucmVwbGFjZSgvXi8sICdbJykucmVwbGFjZSgvJC8sICddJyk7XG4gICAgICAgIGxldCByaWdodCA9IGZpbGVOYW1lLnJlcGxhY2UoL14vLCAnKCcpLnJlcGxhY2UoLyQvLCAnKScpLnJlcGxhY2UoL1xccy9nLCAnJTIwJyk7XG4gICAgICAgIGxldCBuZXdMaW5rID0gYCR7bGVmdH0ke3JpZ2h0fWA7XG5cbiAgICAgICAgbGV0IG1peGVkTGluayA9IG5ldyBSZWdFeHAoJ1xcXFxbKCg/IVxcXFxdXFxcXCh8XFxcXF1cXFxcXSkuKSpcXFxcXScgKyBmb3JtYXRSZWdleChyaWdodCksICdnJyk7XG4gICAgICAgIGxldCBkb3VibGVMaW5rID0gbmV3IFJlZ0V4cChmb3JtYXRSZWdleChmaWxlTmFtZS5yZXBsYWNlKC9eLywgJ1xcW1xcWycpLnJlcGxhY2UoL1xcLm1kJC8sICdcXF1cXF0nKSksICdnJyk7XG5cbiAgICAgICAgcmV0dXJuIGZpbGVDb250ZW50LnJlcGxhY2UobWl4ZWRMaW5rLCBuZXdMaW5rKS5yZXBsYWNlKGRvdWJsZUxpbmssIG5ld0xpbmspO1xuICAgIH1cblxuICAgIC8vIENvbnZlcnQgbWF0aExpbmtzIHRvIGRvdWJsZSBsaW5rc1xuICAgIGNvbnZlcnRUb0RvdWJsZUxpbmtzKGZpbGVOYW1lOiBzdHJpbmcsIGZpbGVDb250ZW50OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBsZXQgZm9ybWF0dGVkTmFtZSA9IGZpbGVOYW1lLnJlcGxhY2UoL14vLCAnKCcpLnJlcGxhY2UoLyQvLCAnKScpLnJlcGxhY2UoL1xccy9nLCAnJTIwJyk7XG5cbiAgICAgICAgbGV0IG1peGVkTGluayA9IG5ldyBSZWdFeHAoJ1xcXFxbKCg/IVxcXFxdXFxcXCh8XFxcXF1cXFxcXSkuKSpcXFxcXScgKyBmb3JtYXRSZWdleChmb3JtYXR0ZWROYW1lKSwgJ2cnKTtcbiAgICAgICAgbGV0IGRvdWJsZUxpbmsgPSBmaWxlTmFtZS5yZXBsYWNlKC9eLywgJ1tbJykucmVwbGFjZSgvXFwubWQkLywgJ11dJyk7XG5cbiAgICAgICAgcmV0dXJuIGZpbGVDb250ZW50LnJlcGxhY2UobWl4ZWRMaW5rLCBkb3VibGVMaW5rKTtcbiAgICB9XG5cbiAgICBhc3luYyBsb2FkU2V0dGluZ3MoKSB7XG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xuICAgIH1cblxuICAgIGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcbiAgICB9XG59XG4iLCAiaW1wb3J0IHsgU2V0dGluZywgUGx1Z2luU2V0dGluZ1RhYiwgTW9kYWwsIFRleHRDb21wb25lbnQsIERyb3Bkb3duQ29tcG9uZW50LCBOb3RpY2UsIFRGaWxlIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1hdGhMaW5rc1NldHRpbmdzIHtcbiAgICB0ZW1wbGF0ZXM6IHN0cmluZ1tdO1xuICAgIGV4Y2x1ZGVkRmlsZVBhdGhzOiBzdHJpbmdbXTtcbiAgICBhdXRvVXBkYXRlOiBib29sZWFuO1xufVxuXG5leHBvcnQgY29uc3QgREVGQVVMVF9TRVRUSU5HUzogTWF0aExpbmtzU2V0dGluZ3MgPSB7XG4gICAgdGVtcGxhdGVzOiBbXSxcbiAgICBleGNsdWRlZEZpbGVQYXRoczogW10sXG4gICAgYXV0b1VwZGF0ZTogdHJ1ZVxufVxuXG5leHBvcnQgY2xhc3MgTWF0aExpbmtzU2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xuICAgIHBsdWdpbjogTWF0aExpbmtzO1xuXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogTWF0aExpbmtzKSB7XG4gICAgICAgIHN1cGVyKGFwcCwgcGx1Z2luKTtcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgfVxuXG4gICAgYXN5bmMgZGlzcGxheSgpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgeyBjb250YWluZXJFbCB9ID0gdGhpcztcblxuICAgICAgICBjb250YWluZXJFbC5lbXB0eSgpO1xuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnaDInLCB7dGV4dDogJ01hdGhMaW5rcyBTZXR0aW5ncyd9KTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdVcGRhdGUgd2hlbiBtb2RpZmllZCcpXG4gICAgICAgICAgICAuc2V0RGVzYygnQXV0b21hdGljYWxseSB1cGRhdGUgbGlua3MgaW4gdGhlIGN1cnJlbnQgZmlsZSB3aGVuIG1vZGlmaWVkLicpXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+IHt0b2dnbGVcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuYXV0b1VwZGF0ZSlcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKGN1cnJlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuYXV0b1VwZGF0ZSA9IGN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnQWRkIGEgbmV3IHRlbXBsYXRlJylcbiAgICAgICAgICAgIC5zZXREZXNjKFxuICAgICAgICAgICAgICAgIGNyZWF0ZUZyYWdtZW50KChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlU3Bhbih7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnR2VuZXJhdGUgbWF0aExpbmtzIHdpdGggYSBuZXcgdGVtcGxhdGUuIFVzZSAnXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBlLmNyZWF0ZUVsKCdjb2RlJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJ21hdGhMaW5rOiBhdXRvJ1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgZS5jcmVhdGVTcGFuKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6ICcgdG8gdXNlIHRlbXBsYXRlcyBpbiBhIGZpbGUuJ1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLmFkZEJ1dHRvbigoYnV0dG9uOiBCdXR0b25Db21wb25lbnQpOiBCdXR0b25Db21wb25lbnQgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBiID0gYnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIC5zZXRUb29sdGlwKFwiQWRkXCIpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRJY29uKFwicGx1c1wiKVxuICAgICAgICAgICAgICAgICAgICAub25DbGljayhhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbW9kYWwgPSBuZXcgQWRkVGVtcGxhdGVzTW9kYWwodGhpcy5hcHApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RhbC5vbkNsb3NlID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtb2RhbC5zYXZlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBtb2RhbC50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2VkOiBtb2RhbC5yZXBsYWNlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBtb2RhbC5yZXBsYWNlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbE1hdGNoOiBtb2RhbC5nbG9iYWxNYXRjaCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbnNpdGl2ZTogbW9kYWwuc2Vuc2l0aXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd29yZDogbW9kYWwud29yZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnRlbXBsYXRlcy5wdXNoKHRlbXBsYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnVwZGF0ZUF1dG9Ob3RlcygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ01hdGhMaW5rczogVGVtcGxhdGUgYWRkZWQuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWwub3BlbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IHRlbXBsYXRlVGl0bGU6IHN0cmluZyB8IG51bGw7XG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ0VkaXQvZGVsZXRlIHRlbXBsYXRlJylcbiAgICAgICAgICAgIC5zZXREZXNjKCdTZWxlY3QgYSB0ZW1wbGF0ZSB0byBlZGl0L2RlbGV0ZSBpdC4nKVxuICAgICAgICAgICAgLmFkZERyb3Bkb3duKChkcm9wZG93bjogRHJvcGRvd25Db21wb25lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBkcm9wZG93bi5hZGRPcHRpb24oXCJfX3NlbGVjdFwiLCBcIlNlbGVjdFwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy50ZW1wbGF0ZXMuZm9yRWFjaCgodGVtcGxhdGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24uYWRkT3B0aW9uKHRlbXBsYXRlLnRpdGxlLCB0ZW1wbGF0ZS50aXRsZSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBkcm9wZG93bi5vbkNoYW5nZShhc3luYyAoY3VycmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudCAhPSAnX19zZWxlY3QnKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVUaXRsZSA9IGN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVGl0bGUgPSBudWxsO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5hZGRFeHRyYUJ1dHRvbigoYnV0dG9uOiBCdXR0b25Db21wb25lbnQpOiBCdXR0b25Db21wb25lbnQgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBiID0gYnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIC5zZXRUb29sdGlwKFwiRWRpdFwiKVxuICAgICAgICAgICAgICAgICAgICAuc2V0SWNvbihcImVkaXRcIilcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRlbXBsYXRlVGl0bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgb3JpZ2luYWxUZW1wbGF0ZXMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMucGx1Z2luLnNldHRpbmdzLnRlbXBsYXRlcykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtb2RhbCA9IG5ldyBFZGl0VGVtcGxhdGVzTW9kYWwodGhpcy5hcHAsIHRlbXBsYXRlVGl0bGUsIHRoaXMucGx1Z2luLnNldHRpbmdzLnRlbXBsYXRlcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RhbC5vbkNsb3NlID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobW9kYWwuc2F2ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4udXBkYXRlQXV0b05vdGVzKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ01hdGhMaW5rczogVGVtcGxhdGUgc2F2ZWQuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy50ZW1wbGF0ZXMgPSBvcmlnaW5hbFRlbXBsYXRlcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RhbC5vcGVuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ01hdGhMaW5rczogUGxlYXNlIHNlbGVjdCBhIHRlbXBsYXRlLicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYWRkRXh0cmFCdXR0b24oKGJ1dHRvbjogQnV0dG9uQ29tcG9uZW50KTogQnV0dG9uQ29tcG9uZW50ID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgYiA9IGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAuc2V0VG9vbHRpcChcIkRlbGV0ZVwiKVxuICAgICAgICAgICAgICAgICAgICAuc2V0SWNvbihcInRyYXNoXCIpXG4gICAgICAgICAgICAgICAgICAgIC5vbkNsaWNrKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZW1wbGF0ZVRpdGxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1vZGFsID0gbmV3IERlbGV0ZU1vZGFsKHRoaXMuYXBwLCBgQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRlbGV0ZSAnJHt0ZW1wbGF0ZVRpdGxlfSc/YCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RhbC5vbkNsb3NlID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobW9kYWwuc2F2ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5wbHVnaW4uc2V0dGluZ3MudGVtcGxhdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucGx1Z2luLnNldHRpbmdzLnRlbXBsYXRlc1tpXS50aXRsZSA9PT0gdGVtcGxhdGVUaXRsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy50ZW1wbGF0ZXMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShgTWF0aExpbmtzOiBUZW1wbGF0ZSAnJHt0ZW1wbGF0ZVRpdGxlfScgZGVsZXRlZC5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsLm9wZW4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnTWF0aExpbmtzOiBQbGVhc2Ugc2VsZWN0IGEgdGVtcGxhdGUuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnQWRkIGFuIGV4Y2x1ZGVkIGZpbGUnKVxuICAgICAgICAgICAgLnNldERlc2MoJ01hdGhMaW5rcyB3aWxsIGlnbm9yZSB0aG9zZSBmaWxlcy4nKVxuICAgICAgICAgICAgLmFkZEJ1dHRvbigoYnV0dG9uOiBCdXR0b25Db21wb25lbnQpOiBCdXR0b25Db21wb25lbnQgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBiID0gYnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIC5zZXRUb29sdGlwKFwiQWRkXCIpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRJY29uKFwicGx1c1wiKVxuICAgICAgICAgICAgICAgICAgICAub25DbGljayhhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbW9kYWwgPSBuZXcgQWRkRXhjbHVkZWRNb2RhbCh0aGlzLmFwcCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsLm9uQ2xvc2UgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1vZGFsLnNhdmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4Y2x1ZGVkRmlsZVBhdGggPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoOiBtb2RhbC5leGNsdWRlZEZpbGVQYXRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNGaWxlOiBtb2RhbC5pc0ZpbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmV4Y2x1ZGVkRmlsZVBhdGhzLnB1c2goZXhjbHVkZWRGaWxlUGF0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtb2RhbC5pc0ZpbGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdNYXRoTGlua3M6IEZpbGUgZXhjbHVkZWQuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ01hdGhMaW5rczogUGF0aCBleGNsY3VkZWQuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWwub3BlbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IGV4Y2x1ZGVkRmlsZVBhdGg6IHN0cmluZyB8IG51bGw7XG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ1JlbW92ZSBmcm9tIGV4Y2x1ZGVkIGZpbGVzJylcbiAgICAgICAgICAgIC5zZXREZXNjKCdSZW1vdmUgYSBmaWxlIGZyb20gdGhlIGxpc3Qgb2YgZXhjbHVkZWQgZmlsZXMuJylcbiAgICAgICAgICAgIC5hZGREcm9wZG93bihhc3luYyAoZHJvcGRvd246IERyb3Bkb3duQ29tcG9uZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgZHJvcGRvd24uYWRkT3B0aW9uKFwiX19zZWxlY3RcIiwgXCJTZWxlY3RcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZXhjbHVkZWRGaWxlUGF0aHMuZm9yRWFjaCgoZXhjbHVkZWRGaWxlUGF0aCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi5hZGRPcHRpb24oZXhjbHVkZWRGaWxlUGF0aC5wYXRoLCBleGNsdWRlZEZpbGVQYXRoLnBhdGgpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgZHJvcGRvd24ub25DaGFuZ2UoYXN5bmMgKGN1cnJlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQgIT0gJ19fc2VsZWN0JylcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2x1ZGVkRmlsZVBhdGggPSBjdXJyZW50O1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBleGNsdWRlZEZpbGVQYXRoID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYWRkRXh0cmFCdXR0b24oKGJ1dHRvbjogQnV0dG9uQ29tcG9uZW50KTogQnV0dG9uQ29tcG9uZW50ID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgYiA9IGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAuc2V0VG9vbHRpcChcIlJlbW92ZVwiKVxuICAgICAgICAgICAgICAgICAgICAuc2V0SWNvbihcInRyYXNoXCIpXG4gICAgICAgICAgICAgICAgICAgIC5vbkNsaWNrKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChleGNsdWRlZEZpbGVQYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1vZGFsID0gbmV3IERlbGV0ZU1vZGFsKHRoaXMuYXBwLCBgQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIHJlbW92ZSAnJHtleGNsdWRlZEZpbGVQYXRofScgZnJvbSB0aGUgbGlzdCBvZiBleGNsdWRlZCBmaWxlcy9wYXRocz9gKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsLm9uQ2xvc2UgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtb2RhbC5zYXZlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnBsdWdpbi5zZXR0aW5ncy5leGNsdWRlZEZpbGVQYXRocy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5leGNsdWRlZEZpbGVQYXRoc1tpXS5wYXRoID09PSBleGNsdWRlZEZpbGVQYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmV4Y2x1ZGVkRmlsZVBhdGhzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoYE1hdGhMaW5rczogJyR7ZXhjbHVkZWRGaWxlUGF0aH0nIHJlbW92ZWQgZnJvbSBleGNsdWRlZCBmaWxlcy5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsLm9wZW4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnTWF0aExpbmtzOiBQbGVhc2Ugc2VsZWN0IGEgZmlsZS4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGI7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG59XG5cbmNsYXNzIEFkZFRlbXBsYXRlc01vZGFsIGV4dGVuZHMgTW9kYWwge1xuICAgIHNhdmVkOiBib29sZWFuID0gZmFsc2U7XG4gICAgcHJvY2VlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgdGl0bGU6IHN0cmluZyA9ICcnO1xuICAgIHJlcGxhY2VkOiBzdHJpbmcgPSAnJztcbiAgICByZXBsYWNlbWVudDogc3RyaW5nID0gJyc7XG4gICAgZ2xvYmFsTWF0Y2g6IGJvb2xlYW4gPSB0cnVlO1xuICAgIHNlbnNpdGl2ZTogYm9vbGVhbiA9IHRydWU7XG4gICAgd29yZDogYm9vbGVhbiA9IHRydWVcblxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwKSB7XG4gICAgICAgIHN1cGVyKGFwcCk7XG4gICAgfVxuXG4gICAgb25PcGVuKCkge1xuICAgICAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcbiAgICAgICAgY29udGVudEVsLmVtcHR5KCk7XG5cbiAgICAgICAgbG9hZFRlbXBsYXRlU2V0dGluZ3MoY29udGVudEVsLCB0aGlzKTtcbiAgICAgICAgbG9hZEJ1dHRvbnNUb0Nsb3NlKHRoaXMsIHRoaXMuY29udGVudEVsLmNyZWF0ZURpdigpLCB0cnVlLCAnQWRkJywgJ2NoZWNrbWFyaycsICdDYW5jZWwnLCAnY3Jvc3MnKTtcbiAgICB9XG59XG5cbmNsYXNzIEVkaXRUZW1wbGF0ZXNNb2RhbCBleHRlbmRzIE1vZGFsIHtcbiAgICBzYXZlZDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHByb2NlZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIHRlbXBsYXRlVGl0bGU6IHN0cmluZztcbiAgICB0ZW1wbGF0ZXM6IHN0cmluZ1tdO1xuXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIHRlbXBsYXRlVGl0bGU6IHN0cmluZywgdGVtcGxhdGVzOiBzdHJpbmdbXSkge1xuICAgICAgICBzdXBlcihhcHApO1xuICAgICAgICB0aGlzLnRlbXBsYXRlVGl0bGUgPSB0ZW1wbGF0ZVRpdGxlO1xuICAgICAgICB0aGlzLnRlbXBsYXRlcyA9IHRlbXBsYXRlcztcbiAgICB9XG5cbiAgICBvbk9wZW4oKSB7XG4gICAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuICAgICAgICBjb250ZW50RWwuZW1wdHkoKTtcblxuICAgICAgICB0aGlzLnRlbXBsYXRlcy5ldmVyeSgodGVtcGxhdGUpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnRlbXBsYXRlVGl0bGUgIT0gdW5kZWZpbmVkICYmIHRlbXBsYXRlLnRpdGxlID09IHRoaXMudGVtcGxhdGVUaXRsZSkge1xuICAgICAgICAgICAgICAgIGxvYWRUZW1wbGF0ZVNldHRpbmdzKGNvbnRlbnRFbCwgdGVtcGxhdGUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KVxuXG4gICAgICAgIGxvYWRCdXR0b25zVG9DbG9zZSh0aGlzLCB0aGlzLmNvbnRlbnRFbC5jcmVhdGVEaXYoKSwgdHJ1ZSwgJ1NhdmUnLCAnY2hlY2ttYXJrJywgJ0NhbmNlbCcsICdjcm9zcycpO1xuICAgIH1cbn1cblxuY2xhc3MgQWRkRXhjbHVkZWRNb2RhbCBleHRlbmRzIE1vZGFsIHtcbiAgICBzYXZlZDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHByb2NlZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIGV4Y2x1ZGVkRmlsZVBhdGg6IHN0cmluZztcbiAgICBpc0ZpbGU6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCkge1xuICAgICAgICBzdXBlcihhcHApO1xuICAgIH1cblxuICAgIG9uT3BlbigpIHtcbiAgICAgICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XG4gICAgICAgIGNvbnRlbnRFbC5lbXB0eSgpO1xuXG4gICAgICAgIGxldCBleGNsdWRlZEZpbGVQYXRoVGV4dDogVGV4dENvbXBvbmVudDtcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGVudEVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ0ZpbGUgbmFtZS9wYXRoIG9mIGZvbGRlcicpXG4gICAgICAgICAgICAuc2V0RGVzYyhcbiAgICAgICAgICAgICAgICBjcmVhdGVGcmFnbWVudCgoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBlLmNyZWF0ZVNwYW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJ0VudGVyIGEgZmlsZSBhcydcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlRWwoJ2NvZGUnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAncGF0aC9uYW1lLm1kJ1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgZS5jcmVhdGVTcGFuKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6ICcgYW5kIGEgZm9sZGVyIGFzICdcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlRWwoJ2NvZGUnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAncGF0aCdcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlU3Bhbih7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnLidcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0KSA9PiB7XG4gICAgICAgICAgICAgICAgZXhjbHVkZWRGaWxlUGF0aFRleHQgPSB0ZXh0O1xuICAgICAgICAgICAgICAgIGxldCBmb290ZXJFbCA9IHRoaXMuY29udGVudEVsLmNyZWF0ZURpdigpO1xuICAgICAgICAgICAgICAgIGxvYWRCdXR0b25zVG9DbG9zZSh0aGlzLCBmb290ZXJFbCwgdGhpcy5wcm9jZWVkLCAnQWRkJywgJ2NoZWNrbWFyaycsICdDYW5jZWwnLCAnY3Jvc3MnKTtcbiAgICAgICAgICAgICAgICBleGNsdWRlZEZpbGVQYXRoVGV4dFxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUoZXhjbHVkZWRGaWxlUGF0aFRleHQpXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZSgoY3VycmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZpbGUgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGN1cnJlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXhjbHVkZWRGaWxlUGF0aCA9IGZpbGUucGF0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzRmlsZSA9IGZpbGUgaW5zdGFuY2VvZiBURmlsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2NlZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2NlZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvb3RlckVsLmVtcHR5KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2FkQnV0dG9uc1RvQ2xvc2UodGhpcywgZm9vdGVyRWwsIHRoaXMucHJvY2VlZCwgJ0FkZCcsICdjaGVja21hcmsnLCAnQ2FuY2VsJywgJ2Nyb3NzJyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxufVxuXG5jbGFzcyBEZWxldGVNb2RhbCBleHRlbmRzIE1vZGFsIHtcbiAgICBzYXZlZDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHByb2NlZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIGFyZVlvdVN1cmU6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBhcmVZb3VTdXJlOiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIoYXBwKTtcbiAgICAgICAgdGhpcy5hcmVZb3VTdXJlID0gYXJlWW91U3VyZTtcbiAgICB9XG5cbiAgICBvbk9wZW4oKSB7XG4gICAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuICAgICAgICBjb250ZW50RWwuZW1wdHkoKTtcblxuICAgICAgICBjb250ZW50RWwuY3JlYXRlRWwoJ2gzJywge3RleHQ6IHRoaXMuYXJlWW91U3VyZX0pO1xuICAgICAgICBsb2FkQnV0dG9uc1RvQ2xvc2UodGhpcywgdGhpcy5jb250ZW50RWwuY3JlYXRlRGl2KCksIHRydWUsICdZZXMnLCAnY2hlY2ttYXJrJywgJ05vJywgJ2Nyb3NzJyk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBsb2FkVGVtcGxhdGVTZXR0aW5ncyhjb250ZW50RWw6IEhUTUxFbGVtZW50LCB0ZW1wbGF0ZTogb2JqZWN0KSB7XG4gICAgbGV0IHRpdGxlVGV4dDogVGV4dENvbXBvbmVudDtcbiAgICBuZXcgU2V0dGluZyhjb250ZW50RWwpXG4gICAgICAgIC5zZXROYW1lKCdUaXRsZScpXG4gICAgICAgIC5zZXREZXNjKCdOYW1lIG9mIHRoZSB0ZW1wbGF0ZS4nKVxuICAgICAgICAuYWRkVGV4dCgodGV4dCkgPT4ge1xuICAgICAgICAgICAgdGl0bGVUZXh0ID0gdGV4dDtcbiAgICAgICAgICAgIHRpdGxlVGV4dC5zZXRWYWx1ZSh0ZW1wbGF0ZS50aXRsZSkub25DaGFuZ2UoKGN1cnJlbnQpID0+IHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZS50aXRsZSA9IGN1cnJlbnQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICBsZXQgcmVwbGFjZWRUZXh0OiBUZXh0Q29tcG9uZW50O1xuICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcbiAgICAgICAgLnNldE5hbWUoJ01hdGNoIGZvci4uLicpXG4gICAgICAgIC5zZXREZXNjKCdTdHJpbmcgdG8gYmUgbWF0Y2hlZCBhbmQgcmVwbGFjZWQuIERvIG5vdCBpbmNsdWRlIHJlZ2V4LicpXG4gICAgICAgIC5hZGRUZXh0KCh0ZXh0KSA9PiB7XG4gICAgICAgICAgICByZXBsYWNlZFRleHQgPSB0ZXh0O1xuICAgICAgICAgICAgcmVwbGFjZWRUZXh0LnNldFZhbHVlKHRlbXBsYXRlLnJlcGxhY2VkKS5vbkNoYW5nZSgoY3VycmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlLnJlcGxhY2VkID0gY3VycmVudDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgIGxldCByZXBsYWNlbWVudFRleHQ6IFRleHRDb21wb25lbnQ7XG4gICAgbmV3IFNldHRpbmcoY29udGVudEVsKVxuICAgICAgICAuc2V0TmFtZSgnUmVwbGFjZSB3aXRoLi4uJylcbiAgICAgICAgLnNldERlc2MoJ1N0cmluZyB0byByZXBsYWNlIG1hdGNoZXMuIERvIG5vdCBlc2NhcGUgYmFja3NsYXNoZXMuJylcbiAgICAgICAgLmFkZFRleHQoKHRleHQpID0+IHtcbiAgICAgICAgICAgIHJlcGxhY2VtZW50VGV4dCA9IHRleHQ7XG4gICAgICAgICAgICByZXBsYWNlbWVudFRleHQuc2V0VmFsdWUodGVtcGxhdGUucmVwbGFjZW1lbnQpLm9uQ2hhbmdlKChjdXJyZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGUucmVwbGFjZW1lbnQgPSBjdXJyZW50O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgbmV3IFNldHRpbmcoY29udGVudEVsKVxuICAgICAgICAuc2V0TmFtZSgnR2xvYmFsIG1hdGNoJylcbiAgICAgICAgLnNldERlc2MoJ01hdGNoIGFsbCBpbnN0YW5jZXMgKGluc3RlYWQgb2YganVzdCB0aGUgZmlyc3QpLicpXG4gICAgICAgIC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT4ge1xuICAgICAgICAgICAgdG9nZ2xlLnNldFZhbHVlKHRlbXBsYXRlLmdsb2JhbE1hdGNoKS5vbkNoYW5nZSgoY3VycmVudCkgPT4gKHRlbXBsYXRlLmdsb2JhbE1hdGNoID0gY3VycmVudCkpO1xuICAgICAgICB9KTtcblxuICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcbiAgICAgICAgLnNldE5hbWUoJ0Nhc2Ugc2Vuc2l0aXZlJylcbiAgICAgICAgLnNldERlc2MoJ01hdGNoZXMgd2lsbCBiZSBjYXNlIHNlbnNpdGl2ZS4nKVxuICAgICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+IHtcbiAgICAgICAgICAgIHRvZ2dsZS5zZXRWYWx1ZSh0ZW1wbGF0ZS5zZW5zaXRpdmUpLm9uQ2hhbmdlKChjdXJyZW50KSA9PiAodGVtcGxhdGUuc2Vuc2l0aXZlID0gY3VycmVudCkpO1xuICAgICAgICB9KTtcblxuICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcbiAgICAgICAgLnNldE5hbWUoJ01hdGNoIHdob2xlIHdvcmRzJylcbiAgICAgICAgLnNldERlc2MoJ09ubHkgbWF0Y2ggd2hvbGUgd29yZHMuJylcbiAgICAgICAgLmFkZFRvZ2dsZSgodG9nZ2xlKSA9PiB7XG4gICAgICAgICAgICB0b2dnbGUuc2V0VmFsdWUodGVtcGxhdGUud29yZCkub25DaGFuZ2UoKGN1cnJlbnQpID0+ICh0ZW1wbGF0ZS53b3JkID0gY3VycmVudCkpO1xuICAgICAgICB9KTtcbn1cblxuZnVuY3Rpb24gbG9hZEJ1dHRvbnNUb0Nsb3NlKG1vZGFsOiBNb2RhbCwgZWxlbWVudDogSFRNTEVsZW1lbnQsIHByb2NlZWQ6IGJvb2xlYW4sIHRydWVUb29sVGlwOiBzdHJpbmcsIHRydWVJY29uOiBzdHJpbmcsIGZhbHNlVG9vbFRpcDogc3RyaW5nLCBmYWxzZUljb246IHN0cmluZykge1xuICAgIGxldCBmb290ZXJCdXR0b25zID0gbmV3IFNldHRpbmcoZWxlbWVudCk7XG4gICAgZm9vdGVyQnV0dG9ucy5hZGRCdXR0b24oKGIpID0+IHtcbiAgICAgICAgYi5zZXRUb29sdGlwKHRydWVUb29sVGlwKVxuICAgICAgICAgICAgLnNldEljb24odHJ1ZUljb24pXG4gICAgICAgICAgICAub25DbGljayhhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFwcm9jZWVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ01hdGhMaW5rczogUGxlYXNlIGVudGVyIGEgdmFsaWQgcGF0aC9maWxlLicpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG1vZGFsLnNhdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgbW9kYWwuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBmb290ZXJCdXR0b25zLmFkZEV4dHJhQnV0dG9uKChiKSA9PiB7XG4gICAgICAgIGIuc2V0VG9vbHRpcChmYWxzZVRvb2xUaXApXG4gICAgICAgICAgICAuc2V0SWNvbihmYWxzZUljb24pXG4gICAgICAgICAgICAub25DbGljayhhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbW9kYWwuc2F2ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBtb2RhbC5jbG9zZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgfSk7XG59XG4iLCAiaW1wb3J0IHsgVEZpbGUgfSBmcm9tICdvYnNpZGlhbic7XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRSZWdleChzdHI6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHN0clxuICAgICAgICAucmVwbGFjZSgvXFxzL2csICdcXFxccycpXG4gICAgICAgIC5yZXBsYWNlKC9cXC4vZywgJ1xcXFwuJylcbiAgICAgICAgLnJlcGxhY2UoL1xcKC9nLCAnXFxcXCgnKVxuICAgICAgICAucmVwbGFjZSgvXFwpL2csICdcXFxcKScpXG4gICAgICAgIC5yZXBsYWNlKC9cXHsvZywgJ1xcXFx7JylcbiAgICAgICAgLnJlcGxhY2UoL1xcfS9nLCAnXFxcXH0nKVxuICAgICAgICAucmVwbGFjZSgvXFxbL2csICdcXFxcWycpXG4gICAgICAgIC5yZXBsYWNlKC9cXF0vZywgJ1xcXFxdJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0V4Y2x1ZGVkKGZpbGU6IFRGaWxlLCBleGNsdWRlZEZpbGVQYXRoczogc3RyaW5nW10pOiBib29sZWFuIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV4Y2x1ZGVkRmlsZVBhdGhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBwYXRoID0gZXhjbHVkZWRGaWxlUGF0aHNbaV07XG4gICAgICAgIGlmIChwYXRoLmlzRmlsZSAmJiBmaWxlLnBhdGggPT09IHBhdGgucGF0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoIXBhdGguaXNGaWxlKSB7XG4gICAgICAgICAgICBsZXQgcGF0aFJlZ2V4ID0gbmV3IFJlZ0V4cChgXFxcXGIke3BhdGgucGF0aH0vYCk7XG4gICAgICAgICAgICBpZiAocGF0aFJlZ2V4LnRlc3QoZmlsZS5wYXRoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEluY2x1ZGVkTm90ZXMoYWxsTm90ZXM6IFRGaWxlW10sIGV4Y2x1ZGVkRmlsZVBhdGhzOiBzdHJpbmdbXSk6IFRGaWxlW10ge1xuICAgIGxldCBhbGxJbmNsdWRlZE5vdGVzOiBURmlsZVtdID0gW107XG4gICAgYWxsTm90ZXMuZm9yRWFjaCgobm90ZSkgPT4ge1xuICAgICAgICBpZiAoIWlzRXhjbHVkZWQobm90ZSwgZXhjbHVkZWRGaWxlUGF0aHMpKVxuICAgICAgICAgICAgYWxsSW5jbHVkZWROb3Rlcy5wdXNoKG5vdGUpO1xuICAgIH0pO1xuICAgIHJldHVybiBhbGxJbmNsdWRlZE5vdGVzO1xufVxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsdUJBQW1DOzs7QUNBbkMsc0JBQWtHO0FBUTNGLElBQU0sbUJBQXNDO0FBQUEsRUFDL0MsV0FBVyxDQUFDO0FBQUEsRUFDWixtQkFBbUIsQ0FBQztBQUFBLEVBQ3BCLFlBQVk7QUFDaEI7QUFFTyxJQUFNLHNCQUFOLGNBQWtDLGlDQUFpQjtBQUFBLEVBR3RELFlBQVksTUFBVSxRQUFtQjtBQUNyQyxVQUFNLE1BQUssTUFBTTtBQUNqQixTQUFLLFNBQVM7QUFBQSxFQUNsQjtBQUFBLEVBRUEsQUFBTSxVQUFnQjtBQUFBO0FBQ2xCLFlBQU0sRUFBRSxnQkFBZ0I7QUFFeEIsa0JBQVksTUFBTTtBQUNsQixrQkFBWSxTQUFTLE1BQU0sRUFBQyxNQUFNLHFCQUFvQixDQUFDO0FBRXZELFVBQUksd0JBQVEsV0FBVyxFQUNsQixRQUFRLHNCQUFzQixFQUM5QixRQUFRLCtEQUErRCxFQUN2RSxVQUFVLENBQUMsV0FBVztBQUFDLGVBQ25CLFNBQVMsS0FBSyxPQUFPLFNBQVMsVUFBVSxFQUN4QyxTQUFTLENBQU8sWUFBWTtBQUN6QixlQUFLLE9BQU8sU0FBUyxhQUFhO0FBQ2xDLGdCQUFNLEtBQUssT0FBTyxhQUFhO0FBQUEsUUFDbkMsRUFBQztBQUFBLE1BQ0wsQ0FBQztBQUVMLFVBQUksd0JBQVEsV0FBVyxFQUNs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
