/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin:
https://github.com/zhaoshenzhai/obsidian-mathlinks
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MathLinks
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  templates: [],
  excludedFilePaths: [],
  autoUpdate: true
};
var MathLinksSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    return __async(this, null, function* () {
      const { containerEl } = this;
      containerEl.empty();
      containerEl.createEl("h2", { text: "MathLinks Settings" });
      new import_obsidian.Setting(containerEl).setName("Update when modified").setDesc("Automatically update links in the current file when modified.").addToggle((toggle) => {
        toggle.setValue(this.plugin.settings.autoUpdate).onChange((current) => __async(this, null, function* () {
          this.plugin.settings.autoUpdate = current;
          yield this.plugin.saveSettings();
        }));
      });
      new import_obsidian.Setting(containerEl).setName("Add a new template").setDesc(createFragment((e) => {
        e.createSpan({ text: "Generate mathLinks with a new template. Use " });
        e.createEl("code", { text: "mathLink: auto" });
        e.createSpan({ text: " to use templates in a file." });
      })).addButton((button) => {
        let b = button.setTooltip("Add").setIcon("plus").onClick(() => __async(this, null, function* () {
          let modal = new AddTemplatesModal(this.app);
          modal.onClose = () => __async(this, null, function* () {
            if (modal.saved) {
              const template = {
                title: modal.title,
                replaced: modal.replaced,
                replacement: modal.replacement,
                globalMatch: modal.globalMatch,
                sensitive: modal.sensitive,
                word: modal.word
              };
              this.plugin.settings.templates.push(template);
              yield this.plugin.saveSettings();
              this.plugin.updateAutoNotes();
              new import_obsidian.Notice("MathLinks: Template added");
            }
          });
          modal.open();
          this.display();
        }));
        return b;
      });
      let templateTitle;
      new import_obsidian.Setting(containerEl).setName("Edit/delete template").setDesc("Select a template to edit/delete it.").addDropdown((dropdown) => {
        dropdown.addOption("__select", "Select");
        this.plugin.settings.templates.forEach((template) => {
          dropdown.addOption(template.title, template.title);
        });
        dropdown.onChange((current) => __async(this, null, function* () {
          if (current != "__select")
            templateTitle = current;
          else
            templateTitle = null;
        }));
      }).addExtraButton((button) => {
        let b = button.setTooltip("Edit").setIcon("edit").onClick(() => __async(this, null, function* () {
          if (templateTitle) {
            let originalTemplates = JSON.parse(JSON.stringify(this.plugin.settings.templates));
            let modal = new EditTemplatesModal(this.app, templateTitle, this.plugin.settings.templates);
            modal.onClose = () => __async(this, null, function* () {
              if (modal.saved) {
                yield this.plugin.saveSettings();
                this.plugin.updateAutoNotes();
                new import_obsidian.Notice("MathLinks: Template saved");
              } else {
                this.plugin.settings.templates = originalTemplates;
              }
            });
            modal.open();
            this.display();
          } else {
            new import_obsidian.Notice("MathLinks: Please select a template");
          }
        }));
        return b;
      }).addExtraButton((button) => {
        let b = button.setTooltip("Delete").setIcon("trash").onClick(() => __async(this, null, function* () {
          if (templateTitle) {
            let modal = new DeleteModal(this.app, `Are you sure you want to delete '${templateTitle}'?`);
            modal.onClose = () => __async(this, null, function* () {
              if (modal.saved) {
                for (let i = 0; i < this.plugin.settings.templates.length; i++) {
                  if (this.plugin.settings.templates[i].title === templateTitle) {
                    this.plugin.settings.templates.splice(i, 1);
                    yield this.plugin.saveSettings();
                    new import_obsidian.Notice(`MathLinks: Template '${templateTitle}' deleted`);
                    break;
                  }
                }
              }
            });
            modal.open();
            this.display();
          } else {
            new import_obsidian.Notice("MathLinks: Please select a template");
          }
        }));
        return b;
      });
      new import_obsidian.Setting(containerEl).setName("Add an excluded file").setDesc("MathLinks will ignore those files.").addButton((button) => {
        let b = button.setTooltip("Add").setIcon("plus").onClick(() => __async(this, null, function* () {
          let modal = new AddExcludedModal(this.app);
          modal.onClose = () => __async(this, null, function* () {
            if (modal.saved) {
              const excludedFilePath2 = {
                path: modal.excludedFilePath,
                isFile: modal.isFile
              };
              this.plugin.settings.excludedFilePaths.push(excludedFilePath2);
              yield this.plugin.saveSettings();
              if (modal.isFile)
                new import_obsidian.Notice("MathLinks: File excluded");
              else
                new import_obsidian.Notice("MathLinks: Path exclcuded");
            }
          });
          modal.open();
          this.display();
        }));
        return b;
      });
      let excludedFilePath;
      new import_obsidian.Setting(containerEl).setName("Remove from excluded files").setDesc("Remove a file from the list of excluded files.").addDropdown((dropdown) => __async(this, null, function* () {
        dropdown.addOption("__select", "Select");
        this.plugin.settings.excludedFilePaths.forEach((excludedFilePath2) => {
          dropdown.addOption(excludedFilePath2.path, excludedFilePath2.path);
        });
        dropdown.onChange((current) => __async(this, null, function* () {
          if (current != "__select")
            excludedFilePath = current;
          else
            excludedFilePath = null;
        }));
      })).addExtraButton((button) => {
        let b = button.setTooltip("Remove").setIcon("trash").onClick(() => __async(this, null, function* () {
          if (excludedFilePath) {
            let modal = new DeleteModal(this.app, `Are you sure you want to remove '${excludedFilePath}' from the list of excluded files/paths?`);
            modal.onClose = () => __async(this, null, function* () {
              if (modal.saved) {
                for (let i = 0; i < this.plugin.settings.excludedFilePaths.length; i++) {
                  if (this.plugin.settings.excludedFilePaths[i].path === excludedFilePath) {
                    this.plugin.settings.excludedFilePaths.splice(i, 1);
                    yield this.plugin.saveSettings();
                    new import_obsidian.Notice(`MathLinks: '${excludedFilePath}' removed from excluded files`);
                    break;
                  }
                }
              }
            });
            modal.open();
            this.display();
          } else {
            new import_obsidian.Notice("MathLinks: Please select a file");
          }
        }));
        return b;
      });
    });
  }
};
var AddTemplatesModal = class extends import_obsidian.Modal {
  constructor(app2) {
    super(app2);
    this.saved = false;
    this.proceed = false;
    this.title = "";
    this.replaced = "";
    this.replacement = "";
    this.globalMatch = true;
    this.sensitive = true;
    this.word = true;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    loadTemplateSettings(contentEl, this);
    loadButtonsToClose(this, this.contentEl.createDiv(), true, "Add", "checkmark", "Cancel", "cross");
  }
};
var EditTemplatesModal = class extends import_obsidian.Modal {
  constructor(app2, templateTitle, templates) {
    super(app2);
    this.saved = false;
    this.proceed = false;
    this.templateTitle = templateTitle;
    this.templates = templates;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    this.templates.every((template) => {
      if (this.templateTitle != void 0 && template.title == this.templateTitle) {
        loadTemplateSettings(contentEl, template);
        return false;
      }
      return true;
    });
    loadButtonsToClose(this, this.contentEl.createDiv(), true, "Save", "checkmark", "Cancel", "cross");
  }
};
var AddExcludedModal = class extends import_obsidian.Modal {
  constructor(app2) {
    super(app2);
    this.saved = false;
    this.proceed = false;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    let excludedFilePathText;
    new import_obsidian.Setting(contentEl).setName("File name/path of folder").setDesc(createFragment((e) => {
      e.createSpan({ text: "Enter a file as" });
      e.createEl("code", { text: "path/name.md" });
      e.createSpan({ text: " and a folder as " });
      e.createEl("code", { text: "path" });
      e.createSpan({ text: "." });
    })).addText((text) => {
      excludedFilePathText = text;
      let footerEl = this.contentEl.createDiv();
      loadButtonsToClose(this, footerEl, this.proceed, "Add", "checkmark", "Cancel", "cross");
      excludedFilePathText.setValue(excludedFilePathText).onChange((current) => {
        let file = app.vault.getAbstractFileByPath(current);
        if (file != null) {
          this.excludedFilePath = file.path;
          this.isFile = file instanceof import_obsidian.TFile;
          this.proceed = true;
        } else {
          this.proceed = false;
        }
        footerEl.empty();
        loadButtonsToClose(this, footerEl, this.proceed, "Add", "checkmark", "Cancel", "cross");
      });
    });
  }
};
var DeleteModal = class extends import_obsidian.Modal {
  constructor(app2, areYouSure) {
    super(app2);
    this.saved = false;
    this.proceed = false;
    this.areYouSure = areYouSure;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h3", { text: this.areYouSure });
    loadButtonsToClose(this, this.contentEl.createDiv(), true, "Yes", "checkmark", "No", "cross");
  }
};
function loadTemplateSettings(contentEl, template) {
  let titleText;
  new import_obsidian.Setting(contentEl).setName("Title").setDesc("Name of the template.").addText((text) => {
    titleText = text;
    titleText.setValue(template.title).onChange((current) => {
      template.title = current;
    });
  });
  let replacedText;
  new import_obsidian.Setting(contentEl).setName("Match for...").setDesc("String to be matched and replaced. Do not include regex.").addText((text) => {
    replacedText = text;
    replacedText.setValue(template.replaced).onChange((current) => {
      template.replaced = current;
    });
  });
  let replacementText;
  new import_obsidian.Setting(contentEl).setName("Replace with...").setDesc("String to replace matches. Do not escape backslashes.").addText((text) => {
    replacementText = text;
    replacementText.setValue(template.replacement).onChange((current) => {
      template.replacement = current;
    });
  });
  new import_obsidian.Setting(contentEl).setName("Global match").setDesc("Match all instances (instead of just the first).").addToggle((toggle) => {
    toggle.setValue(template.globalMatch).onChange((current) => template.globalMatch = current);
  });
  new import_obsidian.Setting(contentEl).setName("Case sensitive").setDesc("Matches will be case sensitive.").addToggle((toggle) => {
    toggle.setValue(template.sensitive).onChange((current) => template.sensitive = current);
  });
  new import_obsidian.Setting(contentEl).setName("Match whole words").setDesc("Only match whole words.").addToggle((toggle) => {
    toggle.setValue(template.word).onChange((current) => template.word = current);
  });
}
function loadButtonsToClose(modal, element, proceed, trueToolTip, trueIcon, falseToolTip, falseIcon) {
  let footerButtons = new import_obsidian.Setting(element);
  footerButtons.addButton((b) => {
    b.setTooltip(trueToolTip).setIcon(trueIcon).onClick(() => __async(this, null, function* () {
      if (!proceed) {
        new import_obsidian.Notice("MathLinks: Please enter a valid path/file");
      } else {
        modal.saved = true;
        modal.close();
      }
    }));
  });
  footerButtons.addExtraButton((b) => {
    b.setTooltip(falseToolTip).setIcon(falseIcon).onClick(() => __async(this, null, function* () {
      modal.saved = false;
      modal.close();
    }));
  });
}

// src/utils.ts
function formatRegex(str) {
  return str.replace(/\s/g, "\\s").replace(/\./g, "\\.").replace(/\(/g, "\\(").replace(/\)/g, "\\)").replace(/\{/g, "\\{").replace(/\}/g, "\\}").replace(/\[/g, "\\[").replace(/\]/g, "\\]");
}
function isExcluded(file, excludedFilePaths) {
  for (let i = 0; i < excludedFilePaths.length; i++) {
    let path = excludedFilePaths[i];
    if (path.isFile && file.path === path.path) {
      return true;
    } else if (!path.isFile) {
      let pathRegex = new RegExp(`\\b${path.path}/`);
      if (pathRegex.test(file.path))
        return true;
    }
  }
  return false;
}
function getIncludedNotes(allNotes, excludedFilePaths) {
  let allIncludedNotes = [];
  allNotes.forEach((note) => {
    if (!isExcluded(note, excludedFilePaths))
      allIncludedNotes.push(note);
  });
  return allIncludedNotes;
}

// src/main.ts
var fs = __toESM(require("fs"));
var MathLinks = class extends import_obsidian2.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addSettingTab(new MathLinksSettingTab(this.app, this));
      const settings2 = this.settings;
      this.app.metadataCache.on("changed", (file, data, cache) => __async(this, null, function* () {
        if (!settings2.autoUpdate || isExcluded(file, settings2.excludedFilePaths))
          return null;
        let mathLink = yield this.getMathLink(file);
        if (mathLink != null && mathLink != void 0)
          this.updateBackLinks(file, mathLink[0]);
        else
          this.removeBackMathLinks(file);
        this.updateOutLinks(file);
      }));
      this.addCommand({
        id: "update_all_mathlinks",
        name: "Update all links",
        callback: () => __async(this, null, function* () {
          let allNotes = yield this.app.vault.getMarkdownFiles();
          let allIncludedNotes = getIncludedNotes(allNotes, settings2.excludedFilePaths);
          let updateNotice = new Notice("MathLinks: Updating...");
          let count = 0;
          allNotes.forEach((note) => __async(this, null, function* () {
            let mathLink = yield this.getMathLink(note);
            if (mathLink != null && mathLink != void 0)
              this.updateBackLinks(note, mathLink[0]);
            else
              this.removeBackMathLinks(note);
            count++;
            updateNotice.setMessage(`MathLinks: Updating... ${count}/${allIncludedNotes.length}`);
            if (count === allIncludedNotes.length) {
              updateNotice.hide();
              new Notice("MathLinks: Updated all links");
            }
          }));
        })
      });
    });
  }
  getMathLink(file) {
    return __async(this, null, function* () {
      let contents = yield this.app.vault.read(file);
      contents = contents.split(/\r?\n/);
      if (contents[0] === "---") {
        for (let lineNumber = 1; lineNumber < contents.length; lineNumber++) {
          let line = contents[lineNumber];
          if (line.length < 10) {
            lineNumber++;
          } else {
            let key = line.substring(0, 10);
            if (key === "mathLink: ") {
              let value = line.replace(key, "");
              if (value != "") {
                if (value === "auto") {
                  let mathLink = yield this.generateMathLinkFromAuto(file);
                  return [mathLink, true];
                }
                return [value, false];
              } else {
                return null;
              }
            } else if (line === "---") {
              return void 0;
            } else {
              lineNumber++;
            }
          }
        }
      }
      return void 0;
    });
  }
  generateMathLinkFromAuto(file) {
    return __async(this, null, function* () {
      let templates = this.settings.templates;
      let mathLink = file.name.replace(".md", "");
      for (let i = 0; i < templates.length; i++) {
        let replaced = new RegExp(formatRegex(templates[i].replaced));
        let replacement = templates[i].replacement;
        let flags = "";
        if (templates[i].globalMatch)
          flags += "g";
        if (!templates[i].sensitive)
          flags += "i";
        if (templates[i].word)
          replaced = RegExp(replaced.source.replace(/^/, "\\b").replace(/$/, "\\b"), flags);
        else
          replaced = RegExp(replaced.source, flags);
        mathLink = mathLink.replace(replaced, replacement);
      }
      return mathLink;
    });
  }
  updateBackLinks(file, mathLink) {
    return __async(this, null, function* () {
      if (!isExcluded(file, settings.excludedFilePaths)) {
        let backLinkFilePaths = this.getBackLinkFilePaths(file);
        if (backLinkFilePaths.length != 0) {
          backLinkFilePaths.forEach((backLinkFilePath) => __async(this, null, function* () {
            let backLinkFile = this.app.vault.getAbstractFileByPath(backLinkFilePath);
            if (backLinkFile instanceof import_obsidian2.TFile) {
              let backLinkFileContent = yield this.app.vault.read(backLinkFile);
              let modified = this.convertToMathLinks(file.name, backLinkFileContent, mathLink);
              if (backLinkFileContent != modified)
                this.app.vault.modify(backLinkFile, modified);
            }
          }));
        }
      }
    });
  }
  removeBackMathLinks(file) {
    return __async(this, null, function* () {
      if (!isExcluded(file, settings.excludedFilePaths)) {
        let backLinkFilePaths = this.getBackLinkFilePaths(file);
        if (backLinkFilePaths.length != 0) {
          backLinkFilePaths.forEach((backLinkFilePath) => __async(this, null, function* () {
            let backLinkFile = this.app.vault.getAbstractFileByPath(backLinkFilePath);
            if (backLinkFile instanceof import_obsidian2.TFile) {
              let backLinkFileContent = yield this.app.vault.read(backLinkFile);
              let vaultPath = this.app.vault.getRoot().vault.adapter.basePath;
              let configDir = this.app.vault.configDir;
              let modified = "";
              let obsidianConfigFile = yield fs.readFile(`${vaultPath}/${configDir}/app.json`, "utf8", (err, data) => {
                if (JSON.parse(data).useMarkdownLinks)
                  modified = this.convertToMarkdownLinks(file.name, backLinkFileContent);
                else
                  modified = this.convertToDoubleLinks(file.name, backLinkFileContent);
                if (backLinkFileContent != modified)
                  this.app.vault.modify(backLinkFile, modified);
              });
            }
          }));
        }
      }
    });
  }
  updateOutLinks(file) {
    return __async(this, null, function* () {
      let fileContent = yield this.app.vault.read(file);
      let modified = fileContent;
      let count = 0;
      let outLinks = yield this.app.metadataCache.getFileCache(file).links;
      if (outLinks != void 0) {
        outLinks.forEach((outLink) => __async(this, null, function* () {
          let outLinkFileName = outLink.link;
          if (outLink.displayText != "")
            outLinkFileName = outLinkFileName.replace(/$/, ".md");
          let outLinkFilePath = this.app.fileManager.getNewFileParent(outLinkFileName).path + "/" + outLinkFileName;
          let outLinkFile = this.app.vault.getAbstractFileByPath(outLinkFilePath);
          if (outLinkFile instanceof import_obsidian2.TFile) {
            let outLinkMathLink = yield this.getMathLink(outLinkFile);
            if (outLinkMathLink != null && outLinkMathLink != void 0)
              modified = this.convertToMathLinks(outLinkFileName, modified, outLinkMathLink[0]);
          }
          count++;
          if (count === outLinks.length && fileContent != modified)
            yield this.app.vault.modify(file, modified);
        }));
      }
    });
  }
  updateAutoNotes() {
    return __async(this, null, function* () {
      let allNotes = yield this.app.vault.getMarkdownFiles();
      let allIncludedNotes = getIncludedNotes(allNotes, this.settings.excludedFilePaths);
      allIncludedNotes.forEach((note) => __async(this, null, function* () {
        let mathLink = yield this.getMathLink(note);
        if (mathLink != null && mathLink != void 0 && mathLink[1])
          this.updateBackLinks(note, mathLink[0]);
        else
          this.removeBackMathLinks(note);
      }));
    });
  }
  getBackLinkFilePaths(file) {
    let backLinkFilePaths = [];
    Object.keys(this.app.metadataCache.resolvedLinks).forEach((key) => {
      let links = this.app.metadataCache.resolvedLinks[key];
      Object.keys(links).forEach((link) => {
        if (link === file.path)
          backLinkFilePaths.push(key);
      });
    });
    return backLinkFilePaths;
  }
  convertToMathLinks(fileName, fileContent, mathLink) {
    let left = mathLink.replace(/^/, "[").replace(/$/, "]");
    let right = fileName.replace(/^/, "(").replace(/$/, ")").replace(/\s/g, "%20");
    let newLink = `${left}${right}`;
    let mixedLink = new RegExp("\\[((?!\\]\\(|\\]\\]).)*\\]" + formatRegex(right), "g");
    let doubleLink = new RegExp(formatRegex(fileName.replace(/^/, "[[").replace(/\.md$/, "]]")), "g");
    return fileContent.replace(mixedLink, newLink).replace(doubleLink, newLink);
  }
  convertToDoubleLinks(fileName, fileContent) {
    let formattedName = fileName.replace(/^/, "(").replace(/$/, ")").replace(/\s/g, "%20");
    let mixedLink = new RegExp("\\[((?!\\]\\(|\\]\\]).)*\\]" + formatRegex(formattedName), "g");
    let doubleLink = fileName.replace(/^/, "[[").replace(/\.md$/, "]]");
    return fileContent.replace(mixedLink, doubleLink);
  }
  convertToMarkdownLinks(fileName, fileContent) {
    let formattedName = fileName.replace(/^/, "(").replace(/$/, ")").replace(/\s/g, "%20");
    let mixedLink = new RegExp("\\[((?!\\]\\(|\\]\\]).)*\\]" + formatRegex(formattedName), "g");
    let markdownLink = fileName.replace(/^/, "[").replace(/\.md$/, `]${formattedName}`);
    return fileContent.replace(mixedLink, markdownLink);
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21haW4udHMiLCAic3JjL3NldHRpbmdzLnRzIiwgInNyYy91dGlscy50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBQbHVnaW4sIFRGaWxlIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgTWF0aExpbmtzU2V0dGluZ3MsIE1hdGhMaW5rc1NldHRpbmdUYWIsIERFRkFVTFRfU0VUVElOR1MgfSBmcm9tICcuL3NldHRpbmdzJztcbmltcG9ydCB7IGZvcm1hdFJlZ2V4LCBpc0V4Y2x1ZGVkLCBnZXRJbmNsdWRlZE5vdGVzIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hdGhMaW5rcyBleHRlbmRzIFBsdWdpbiB7XG4gICAgc2V0dGluZ3M6IE1hdGhMaW5rc1NldHRpbmdzO1xuXG4gICAgYXN5bmMgb25sb2FkKCkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xuICAgICAgICB0aGlzLmFkZFNldHRpbmdUYWIobmV3IE1hdGhMaW5rc1NldHRpbmdUYWIodGhpcy5hcHAsIHRoaXMpKTtcbiAgICAgICAgY29uc3Qgc2V0dGluZ3MgPSB0aGlzLnNldHRpbmdzO1xuXG4gICAgICAgIHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUub24oJ2NoYW5nZWQnLCBhc3luYyAoZmlsZTogVEZpbGUsIGRhdGE6IHN0cmluZywgY2FjaGU6IENhY2hlZE1ldGFEYXRhKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXNldHRpbmdzLmF1dG9VcGRhdGUgfHwgaXNFeGNsdWRlZChmaWxlLCBzZXR0aW5ncy5leGNsdWRlZEZpbGVQYXRocykpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgICAgIGxldCBtYXRoTGluayA9IGF3YWl0IHRoaXMuZ2V0TWF0aExpbmsoZmlsZSk7XG4gICAgICAgICAgICBpZiAobWF0aExpbmsgIT0gbnVsbCAmJiBtYXRoTGluayAhPSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVCYWNrTGlua3MoZmlsZSwgbWF0aExpbmtbMF0pO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQmFja01hdGhMaW5rcyhmaWxlKTtcblxuICAgICAgICAgICAgdGhpcy51cGRhdGVPdXRMaW5rcyhmaWxlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgICAgICAgIGlkOiBcInVwZGF0ZV9hbGxfbWF0aGxpbmtzXCIsXG4gICAgICAgICAgICBuYW1lOiBcIlVwZGF0ZSBhbGwgbGlua3NcIixcbiAgICAgICAgICAgIGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGFsbE5vdGVzID0gYXdhaXQgdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuICAgICAgICAgICAgICAgIGxldCBhbGxJbmNsdWRlZE5vdGVzID0gZ2V0SW5jbHVkZWROb3RlcyhhbGxOb3Rlcywgc2V0dGluZ3MuZXhjbHVkZWRGaWxlUGF0aHMpO1xuICAgICAgICAgICAgICAgIGxldCB1cGRhdGVOb3RpY2UgPSBuZXcgTm90aWNlKCdNYXRoTGlua3M6IFVwZGF0aW5nLi4uJyk7XG5cbiAgICAgICAgICAgICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgICAgICAgICAgIGFsbE5vdGVzLmZvckVhY2goYXN5bmMgKG5vdGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1hdGhMaW5rID0gYXdhaXQgdGhpcy5nZXRNYXRoTGluayhub3RlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGhMaW5rICE9IG51bGwgJiYgbWF0aExpbmsgIT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVCYWNrTGlua3Mobm90ZSwgbWF0aExpbmtbMF0pO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUJhY2tNYXRoTGlua3Mobm90ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlTm90aWNlLnNldE1lc3NhZ2UoYE1hdGhMaW5rczogVXBkYXRpbmcuLi4gJHtjb3VudH0vJHthbGxJbmNsdWRlZE5vdGVzLmxlbmd0aH1gKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvdW50ID09PSBhbGxJbmNsdWRlZE5vdGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlTm90aWNlLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ01hdGhMaW5rczogVXBkYXRlZCBhbGwgbGlua3MnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRNYXRoTGluayhmaWxlOiBURmlsZSk6IFtzdHJpbmcsIGJvb2xlYW5dIHwgbnVsbCB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGxldCBjb250ZW50cyA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LnJlYWQoZmlsZSk7XG4gICAgICAgIGNvbnRlbnRzID0gY29udGVudHMuc3BsaXQoL1xccj9cXG4vKTtcblxuICAgICAgICBpZiAoY29udGVudHNbMF0gPT09ICctLS0nKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBsaW5lTnVtYmVyID0gMTsgbGluZU51bWJlciA8IGNvbnRlbnRzLmxlbmd0aDsgbGluZU51bWJlcisrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGxpbmUgPSBjb250ZW50c1tsaW5lTnVtYmVyXTtcbiAgICAgICAgICAgICAgICBpZiAobGluZS5sZW5ndGggPCAxMCkge1xuICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyKys7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGtleSA9IGxpbmUuc3Vic3RyaW5nKDAsIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gJ21hdGhMaW5rOiAnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBsaW5lLnJlcGxhY2Uoa2V5LCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09ICdhdXRvJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWF0aExpbmsgPSBhd2FpdCB0aGlzLmdlbmVyYXRlTWF0aExpbmtGcm9tQXV0byhmaWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFttYXRoTGluaywgdHJ1ZV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbdmFsdWUsIGZhbHNlXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobGluZSA9PT0gJy0tLScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBhc3luYyBnZW5lcmF0ZU1hdGhMaW5rRnJvbUF1dG8oZmlsZTogVGZpbGUpOiBzdHJpbmcge1xuICAgICAgICBsZXQgdGVtcGxhdGVzID0gdGhpcy5zZXR0aW5ncy50ZW1wbGF0ZXM7XG4gICAgICAgIGxldCBtYXRoTGluayA9IGZpbGUubmFtZS5yZXBsYWNlKCdcXC5tZCcsICcnKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZW1wbGF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCByZXBsYWNlZCA9IG5ldyBSZWdFeHAoZm9ybWF0UmVnZXgodGVtcGxhdGVzW2ldLnJlcGxhY2VkKSk7XG4gICAgICAgICAgICBsZXQgcmVwbGFjZW1lbnQgPSB0ZW1wbGF0ZXNbaV0ucmVwbGFjZW1lbnQ7XG5cbiAgICAgICAgICAgIGxldCBmbGFncyA9ICcnO1xuICAgICAgICAgICAgaWYgKHRlbXBsYXRlc1tpXS5nbG9iYWxNYXRjaClcbiAgICAgICAgICAgICAgICBmbGFncyArPSAnZyc7XG4gICAgICAgICAgICBpZiAoIXRlbXBsYXRlc1tpXS5zZW5zaXRpdmUpXG4gICAgICAgICAgICAgICAgZmxhZ3MgKz0gJ2knO1xuXG4gICAgICAgICAgICBpZiAodGVtcGxhdGVzW2ldLndvcmQpXG4gICAgICAgICAgICAgICAgcmVwbGFjZWQgPSBSZWdFeHAocmVwbGFjZWQuc291cmNlLnJlcGxhY2UoL14vLCAnXFxcXGInKS5yZXBsYWNlKC8kLywgJ1xcXFxiJyksIGZsYWdzKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZXBsYWNlZCA9IFJlZ0V4cChyZXBsYWNlZC5zb3VyY2UsIGZsYWdzKTtcblxuICAgICAgICAgICAgbWF0aExpbmsgPSBtYXRoTGluay5yZXBsYWNlKHJlcGxhY2VkLCByZXBsYWNlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1hdGhMaW5rO1xuICAgIH1cblxuICAgIGFzeW5jIHVwZGF0ZUJhY2tMaW5rcyhmaWxlOiBURmlsZSwgbWF0aExpbms6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBpZiAoIWlzRXhjbHVkZWQoZmlsZSwgc2V0dGluZ3MuZXhjbHVkZWRGaWxlUGF0aHMpKSB7XG4gICAgICAgICAgICBsZXQgYmFja0xpbmtGaWxlUGF0aHMgPSB0aGlzLmdldEJhY2tMaW5rRmlsZVBhdGhzKGZpbGUpO1xuICAgICAgICAgICAgaWYgKGJhY2tMaW5rRmlsZVBhdGhzLmxlbmd0aCAhPSAwKSB7XG4gICAgICAgICAgICAgICAgYmFja0xpbmtGaWxlUGF0aHMuZm9yRWFjaChhc3luYyAoYmFja0xpbmtGaWxlUGF0aCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgYmFja0xpbmtGaWxlID0gdGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGJhY2tMaW5rRmlsZVBhdGgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYmFja0xpbmtGaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBiYWNrTGlua0ZpbGVDb250ZW50ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZChiYWNrTGlua0ZpbGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1vZGlmaWVkID0gdGhpcy5jb252ZXJ0VG9NYXRoTGlua3MoZmlsZS5uYW1lLCBiYWNrTGlua0ZpbGVDb250ZW50LCBtYXRoTGluayk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiYWNrTGlua0ZpbGVDb250ZW50ICE9IG1vZGlmaWVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwLnZhdWx0Lm1vZGlmeShiYWNrTGlua0ZpbGUsIG1vZGlmaWVkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyByZW1vdmVCYWNrTWF0aExpbmtzKGZpbGU6IFRGaWxlKTogdm9pZCB7XG4gICAgICAgIGlmICghaXNFeGNsdWRlZChmaWxlLCBzZXR0aW5ncy5leGNsdWRlZEZpbGVQYXRocykpIHtcbiAgICAgICAgICAgIGxldCBiYWNrTGlua0ZpbGVQYXRocyA9IHRoaXMuZ2V0QmFja0xpbmtGaWxlUGF0aHMoZmlsZSk7XG4gICAgICAgICAgICBpZiAoYmFja0xpbmtGaWxlUGF0aHMubGVuZ3RoICE9IDApIHtcbiAgICAgICAgICAgICAgICBiYWNrTGlua0ZpbGVQYXRocy5mb3JFYWNoKGFzeW5jIChiYWNrTGlua0ZpbGVQYXRoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBiYWNrTGlua0ZpbGUgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoYmFja0xpbmtGaWxlUGF0aCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChiYWNrTGlua0ZpbGUgaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGJhY2tMaW5rRmlsZUNvbnRlbnQgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5yZWFkKGJhY2tMaW5rRmlsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdmF1bHRQYXRoID0gdGhpcy5hcHAudmF1bHQuZ2V0Um9vdCgpLnZhdWx0LmFkYXB0ZXIuYmFzZVBhdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY29uZmlnRGlyID0gdGhpcy5hcHAudmF1bHQuY29uZmlnRGlyO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1vZGlmaWVkID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgb2JzaWRpYW5Db25maWdGaWxlID0gYXdhaXQgZnMucmVhZEZpbGUoYCR7dmF1bHRQYXRofS8ke2NvbmZpZ0Rpcn0vYXBwLmpzb25gLCAndXRmOCcsIChlcnIsIGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoSlNPTi5wYXJzZShkYXRhKS51c2VNYXJrZG93bkxpbmtzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RpZmllZCA9IHRoaXMuY29udmVydFRvTWFya2Rvd25MaW5rcyhmaWxlLm5hbWUsIGJhY2tMaW5rRmlsZUNvbnRlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kaWZpZWQgPSB0aGlzLmNvbnZlcnRUb0RvdWJsZUxpbmtzKGZpbGUubmFtZSwgYmFja0xpbmtGaWxlQ29udGVudCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYmFja0xpbmtGaWxlQ29udGVudCAhPSBtb2RpZmllZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHAudmF1bHQubW9kaWZ5KGJhY2tMaW5rRmlsZSwgbW9kaWZpZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIHVwZGF0ZU91dExpbmtzKGZpbGU6IFRGaWxlKTogdm9pZCB7XG4gICAgICAgIGxldCBmaWxlQ29udGVudCA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LnJlYWQoZmlsZSk7XG4gICAgICAgIGxldCBtb2RpZmllZCA9IGZpbGVDb250ZW50O1xuXG4gICAgICAgIGxldCBjb3VudCA9IDA7XG4gICAgICAgIGxldCBvdXRMaW5rcyA9IGF3YWl0IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpLmxpbmtzO1xuICAgICAgICBpZiAob3V0TGlua3MgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBvdXRMaW5rcy5mb3JFYWNoKGFzeW5jIChvdXRMaW5rKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IG91dExpbmtGaWxlTmFtZSA9IG91dExpbmsubGluaztcbiAgICAgICAgICAgICAgICBpZiAob3V0TGluay5kaXNwbGF5VGV4dCAhPSBcIlwiKVxuICAgICAgICAgICAgICAgICAgICBvdXRMaW5rRmlsZU5hbWUgPSBvdXRMaW5rRmlsZU5hbWUucmVwbGFjZSgvJC8sICcubWQnKTtcblxuICAgICAgICAgICAgICAgIGxldCBvdXRMaW5rRmlsZVBhdGggPSB0aGlzLmFwcC5maWxlTWFuYWdlci5nZXROZXdGaWxlUGFyZW50KG91dExpbmtGaWxlTmFtZSkucGF0aCArICcvJyArIG91dExpbmtGaWxlTmFtZTtcbiAgICAgICAgICAgICAgICBsZXQgb3V0TGlua0ZpbGUgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgob3V0TGlua0ZpbGVQYXRoKTtcblxuICAgICAgICAgICAgICAgIGlmIChvdXRMaW5rRmlsZSBpbnN0YW5jZW9mIFRGaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBvdXRMaW5rTWF0aExpbmsgPSBhd2FpdCB0aGlzLmdldE1hdGhMaW5rKG91dExpbmtGaWxlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG91dExpbmtNYXRoTGluayAhPSBudWxsICYmIG91dExpbmtNYXRoTGluayAhPSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RpZmllZCA9IHRoaXMuY29udmVydFRvTWF0aExpbmtzKG91dExpbmtGaWxlTmFtZSwgbW9kaWZpZWQsIG91dExpbmtNYXRoTGlua1swXSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgICAgICBpZiAoY291bnQgPT09IG91dExpbmtzLmxlbmd0aCAmJiBmaWxlQ29udGVudCAhPSBtb2RpZmllZClcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hcHAudmF1bHQubW9kaWZ5KGZpbGUsIG1vZGlmaWVkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgdXBkYXRlQXV0b05vdGVzKCk6IHZvaWQge1xuICAgICAgICBsZXQgYWxsTm90ZXMgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XG4gICAgICAgIGxldCBhbGxJbmNsdWRlZE5vdGVzID0gZ2V0SW5jbHVkZWROb3RlcyhhbGxOb3RlcywgdGhpcy5zZXR0aW5ncy5leGNsdWRlZEZpbGVQYXRocyk7XG4gICAgICAgIGFsbEluY2x1ZGVkTm90ZXMuZm9yRWFjaChhc3luYyAobm90ZSkgPT4ge1xuICAgICAgICAgICAgbGV0IG1hdGhMaW5rID0gYXdhaXQgdGhpcy5nZXRNYXRoTGluayhub3RlKTtcbiAgICAgICAgICAgIGlmIChtYXRoTGluayAhPSBudWxsICYmIG1hdGhMaW5rICE9IHVuZGVmaW5lZCAmJiBtYXRoTGlua1sxXSlcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUJhY2tMaW5rcyhub3RlLCBtYXRoTGlua1swXSk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVCYWNrTWF0aExpbmtzKG5vdGUpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBnZXRCYWNrTGlua0ZpbGVQYXRocyhmaWxlOiBUZmlsZSk6IHN0cmluZ1tdIHtcbiAgICAgICAgbGV0IGJhY2tMaW5rRmlsZVBhdGhzOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLnJlc29sdmVkTGlua3MpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgbGV0IGxpbmtzID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5yZXNvbHZlZExpbmtzW2tleV07XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhsaW5rcykuZm9yRWFjaCgobGluaykgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChsaW5rID09PSBmaWxlLnBhdGgpXG4gICAgICAgICAgICAgICAgICAgIGJhY2tMaW5rRmlsZVBhdGhzLnB1c2goa2V5KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gYmFja0xpbmtGaWxlUGF0aHM7XG4gICAgfVxuXG4gICAgY29udmVydFRvTWF0aExpbmtzKGZpbGVOYW1lOiBzdHJpbmcsIGZpbGVDb250ZW50OiBzdHJpbmcsIG1hdGhMaW5rOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBsZXQgbGVmdCA9IG1hdGhMaW5rLnJlcGxhY2UoL14vLCAnWycpLnJlcGxhY2UoLyQvLCAnXScpO1xuICAgICAgICBsZXQgcmlnaHQgPSBmaWxlTmFtZS5yZXBsYWNlKC9eLywgJygnKS5yZXBsYWNlKC8kLywgJyknKS5yZXBsYWNlKC9cXHMvZywgJyUyMCcpO1xuICAgICAgICBsZXQgbmV3TGluayA9IGAke2xlZnR9JHtyaWdodH1gO1xuXG4gICAgICAgIGxldCBtaXhlZExpbmsgPSBuZXcgUmVnRXhwKCdcXFxcWygoPyFcXFxcXVxcXFwofFxcXFxdXFxcXF0pLikqXFxcXF0nICsgZm9ybWF0UmVnZXgocmlnaHQpLCAnZycpO1xuICAgICAgICBsZXQgZG91YmxlTGluayA9IG5ldyBSZWdFeHAoZm9ybWF0UmVnZXgoZmlsZU5hbWUucmVwbGFjZSgvXi8sICdcXFtcXFsnKS5yZXBsYWNlKC9cXC5tZCQvLCAnXFxdXFxdJykpLCAnZycpO1xuXG4gICAgICAgIHJldHVybiBmaWxlQ29udGVudC5yZXBsYWNlKG1peGVkTGluaywgbmV3TGluaykucmVwbGFjZShkb3VibGVMaW5rLCBuZXdMaW5rKTtcbiAgICB9XG5cbiAgICBjb252ZXJ0VG9Eb3VibGVMaW5rcyhmaWxlTmFtZTogc3RyaW5nLCBmaWxlQ29udGVudDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IGZvcm1hdHRlZE5hbWUgPSBmaWxlTmFtZS5yZXBsYWNlKC9eLywgJygnKS5yZXBsYWNlKC8kLywgJyknKS5yZXBsYWNlKC9cXHMvZywgJyUyMCcpO1xuXG4gICAgICAgIGxldCBtaXhlZExpbmsgPSBuZXcgUmVnRXhwKCdcXFxcWygoPyFcXFxcXVxcXFwofFxcXFxdXFxcXF0pLikqXFxcXF0nICsgZm9ybWF0UmVnZXgoZm9ybWF0dGVkTmFtZSksICdnJyk7XG4gICAgICAgIGxldCBkb3VibGVMaW5rID0gZmlsZU5hbWUucmVwbGFjZSgvXi8sICdbWycpLnJlcGxhY2UoL1xcLm1kJC8sICddXScpO1xuXG4gICAgICAgIHJldHVybiBmaWxlQ29udGVudC5yZXBsYWNlKG1peGVkTGluaywgZG91YmxlTGluayk7XG4gICAgfVxuXG4gICAgY29udmVydFRvTWFya2Rvd25MaW5rcyhmaWxlTmFtZTogc3RyaW5nLCBmaWxlQ29udGVudDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IGZvcm1hdHRlZE5hbWUgPSBmaWxlTmFtZS5yZXBsYWNlKC9eLywgJygnKS5yZXBsYWNlKC8kLywgJyknKS5yZXBsYWNlKC9cXHMvZywgJyUyMCcpO1xuXG4gICAgICAgIGxldCBtaXhlZExpbmsgPSBuZXcgUmVnRXhwKCdcXFxcWygoPyFcXFxcXVxcXFwofFxcXFxdXFxcXF0pLikqXFxcXF0nICsgZm9ybWF0UmVnZXgoZm9ybWF0dGVkTmFtZSksICdnJyk7XG4gICAgICAgIGxldCBtYXJrZG93bkxpbmsgPSBmaWxlTmFtZS5yZXBsYWNlKC9eLywgJ1snKS5yZXBsYWNlKC9cXC5tZCQvLCBgXSR7Zm9ybWF0dGVkTmFtZX1gKTtcblxuICAgICAgICByZXR1cm4gZmlsZUNvbnRlbnQucmVwbGFjZShtaXhlZExpbmssIG1hcmtkb3duTGluayk7XG4gICAgfVxuXG4gICAgYXN5bmMgbG9hZFNldHRpbmdzKCkge1xuICAgICAgICB0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcbiAgICB9XG5cbiAgICBhc3luYyBzYXZlU2V0dGluZ3MoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XG4gICAgfVxufVxuIiwgImltcG9ydCB7IFNldHRpbmcsIFBsdWdpblNldHRpbmdUYWIsIE1vZGFsLCBUZXh0Q29tcG9uZW50LCBEcm9wZG93bkNvbXBvbmVudCwgTm90aWNlLCBURmlsZSB9IGZyb20gJ29ic2lkaWFuJztcblxuZXhwb3J0IGludGVyZmFjZSBNYXRoTGlua3NTZXR0aW5ncyB7XG4gICAgdGVtcGxhdGVzOiBzdHJpbmdbXTtcbiAgICBleGNsdWRlZEZpbGVQYXRoczogc3RyaW5nW107XG4gICAgYXV0b1VwZGF0ZTogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfU0VUVElOR1M6IE1hdGhMaW5rc1NldHRpbmdzID0ge1xuICAgIHRlbXBsYXRlczogW10sXG4gICAgZXhjbHVkZWRGaWxlUGF0aHM6IFtdLFxuICAgIGF1dG9VcGRhdGU6IHRydWVcbn1cblxuZXhwb3J0IGNsYXNzIE1hdGhMaW5rc1NldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcbiAgICBwbHVnaW46IE1hdGhMaW5rcztcblxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IE1hdGhMaW5rcykge1xuICAgICAgICBzdXBlcihhcHAsIHBsdWdpbik7XG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgIH1cblxuICAgIGFzeW5jIGRpc3BsYXkoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XG5cbiAgICAgICAgY29udGFpbmVyRWwuZW1wdHkoKTtcbiAgICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoJ2gyJywge3RleHQ6ICdNYXRoTGlua3MgU2V0dGluZ3MnfSk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnVXBkYXRlIHdoZW4gbW9kaWZpZWQnKVxuICAgICAgICAgICAgLnNldERlc2MoJ0F1dG9tYXRpY2FsbHkgdXBkYXRlIGxpbmtzIGluIHRoZSBjdXJyZW50IGZpbGUgd2hlbiBtb2RpZmllZC4nKVxuICAgICAgICAgICAgLmFkZFRvZ2dsZSgodG9nZ2xlKSA9PiB7dG9nZ2xlXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmF1dG9VcGRhdGUpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jIChjdXJyZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmF1dG9VcGRhdGUgPSBjdXJyZW50O1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ0FkZCBhIG5ldyB0ZW1wbGF0ZScpXG4gICAgICAgICAgICAuc2V0RGVzYyhcbiAgICAgICAgICAgICAgICBjcmVhdGVGcmFnbWVudCgoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBlLmNyZWF0ZVNwYW4oe3RleHQ6ICdHZW5lcmF0ZSBtYXRoTGlua3Mgd2l0aCBhIG5ldyB0ZW1wbGF0ZS4gVXNlICd9KTtcbiAgICAgICAgICAgICAgICAgICAgZS5jcmVhdGVFbCgnY29kZScsIHt0ZXh0OiAnbWF0aExpbms6IGF1dG8nfSk7XG4gICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlU3Bhbih7dGV4dDogJyB0byB1c2UgdGVtcGxhdGVzIGluIGEgZmlsZS4nfSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5hZGRCdXR0b24oKGJ1dHRvbjogQnV0dG9uQ29tcG9uZW50KTogQnV0dG9uQ29tcG9uZW50ID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgYiA9IGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAuc2V0VG9vbHRpcChcIkFkZFwiKVxuICAgICAgICAgICAgICAgICAgICAuc2V0SWNvbihcInBsdXNcIilcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1vZGFsID0gbmV3IEFkZFRlbXBsYXRlc01vZGFsKHRoaXMuYXBwKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWwub25DbG9zZSA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobW9kYWwuc2F2ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVtcGxhdGUgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogbW9kYWwudGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlZDogbW9kYWwucmVwbGFjZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogbW9kYWwucmVwbGFjZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxNYXRjaDogbW9kYWwuZ2xvYmFsTWF0Y2gsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5zaXRpdmU6IG1vZGFsLnNlbnNpdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmQ6IG1vZGFsLndvcmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy50ZW1wbGF0ZXMucHVzaCh0ZW1wbGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi51cGRhdGVBdXRvTm90ZXMoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdNYXRoTGlua3M6IFRlbXBsYXRlIGFkZGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWwub3BlbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IHRlbXBsYXRlVGl0bGU6IHN0cmluZyB8IG51bGw7XG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ0VkaXQvZGVsZXRlIHRlbXBsYXRlJylcbiAgICAgICAgICAgIC5zZXREZXNjKCdTZWxlY3QgYSB0ZW1wbGF0ZSB0byBlZGl0L2RlbGV0ZSBpdC4nKVxuICAgICAgICAgICAgLmFkZERyb3Bkb3duKChkcm9wZG93bjogRHJvcGRvd25Db21wb25lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBkcm9wZG93bi5hZGRPcHRpb24oXCJfX3NlbGVjdFwiLCBcIlNlbGVjdFwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy50ZW1wbGF0ZXMuZm9yRWFjaCgodGVtcGxhdGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24uYWRkT3B0aW9uKHRlbXBsYXRlLnRpdGxlLCB0ZW1wbGF0ZS50aXRsZSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBkcm9wZG93bi5vbkNoYW5nZShhc3luYyAoY3VycmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudCAhPSAnX19zZWxlY3QnKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVUaXRsZSA9IGN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVGl0bGUgPSBudWxsO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5hZGRFeHRyYUJ1dHRvbigoYnV0dG9uOiBCdXR0b25Db21wb25lbnQpOiBCdXR0b25Db21wb25lbnQgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBiID0gYnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIC5zZXRUb29sdGlwKFwiRWRpdFwiKVxuICAgICAgICAgICAgICAgICAgICAuc2V0SWNvbihcImVkaXRcIilcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRlbXBsYXRlVGl0bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgb3JpZ2luYWxUZW1wbGF0ZXMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMucGx1Z2luLnNldHRpbmdzLnRlbXBsYXRlcykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtb2RhbCA9IG5ldyBFZGl0VGVtcGxhdGVzTW9kYWwodGhpcy5hcHAsIHRlbXBsYXRlVGl0bGUsIHRoaXMucGx1Z2luLnNldHRpbmdzLnRlbXBsYXRlcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RhbC5vbkNsb3NlID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobW9kYWwuc2F2ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4udXBkYXRlQXV0b05vdGVzKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ01hdGhMaW5rczogVGVtcGxhdGUgc2F2ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnRlbXBsYXRlcyA9IG9yaWdpbmFsVGVtcGxhdGVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsLm9wZW4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnTWF0aExpbmtzOiBQbGVhc2Ugc2VsZWN0IGEgdGVtcGxhdGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGI7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmFkZEV4dHJhQnV0dG9uKChidXR0b246IEJ1dHRvbkNvbXBvbmVudCk6IEJ1dHRvbkNvbXBvbmVudCA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGIgPSBidXR0b25cbiAgICAgICAgICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJEZWxldGVcIilcbiAgICAgICAgICAgICAgICAgICAgLnNldEljb24oXCJ0cmFzaFwiKVxuICAgICAgICAgICAgICAgICAgICAub25DbGljayhhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVtcGxhdGVUaXRsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtb2RhbCA9IG5ldyBEZWxldGVNb2RhbCh0aGlzLmFwcCwgYEFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgJyR7dGVtcGxhdGVUaXRsZX0nP2ApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWwub25DbG9zZSA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1vZGFsLnNhdmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucGx1Z2luLnNldHRpbmdzLnRlbXBsYXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy50ZW1wbGF0ZXNbaV0udGl0bGUgPT09IHRlbXBsYXRlVGl0bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MudGVtcGxhdGVzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoYE1hdGhMaW5rczogVGVtcGxhdGUgJyR7dGVtcGxhdGVUaXRsZX0nIGRlbGV0ZWRgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsLm9wZW4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnTWF0aExpbmtzOiBQbGVhc2Ugc2VsZWN0IGEgdGVtcGxhdGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGI7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdBZGQgYW4gZXhjbHVkZWQgZmlsZScpXG4gICAgICAgICAgICAuc2V0RGVzYygnTWF0aExpbmtzIHdpbGwgaWdub3JlIHRob3NlIGZpbGVzLicpXG4gICAgICAgICAgICAuYWRkQnV0dG9uKChidXR0b246IEJ1dHRvbkNvbXBvbmVudCk6IEJ1dHRvbkNvbXBvbmVudCA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGIgPSBidXR0b25cbiAgICAgICAgICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJBZGRcIilcbiAgICAgICAgICAgICAgICAgICAgLnNldEljb24oXCJwbHVzXCIpXG4gICAgICAgICAgICAgICAgICAgIC5vbkNsaWNrKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtb2RhbCA9IG5ldyBBZGRFeGNsdWRlZE1vZGFsKHRoaXMuYXBwKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWwub25DbG9zZSA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobW9kYWwuc2F2ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXhjbHVkZWRGaWxlUGF0aCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGg6IG1vZGFsLmV4Y2x1ZGVkRmlsZVBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0ZpbGU6IG1vZGFsLmlzRmlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZXhjbHVkZWRGaWxlUGF0aHMucHVzaChleGNsdWRlZEZpbGVQYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1vZGFsLmlzRmlsZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ01hdGhMaW5rczogRmlsZSBleGNsdWRlZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdNYXRoTGlua3M6IFBhdGggZXhjbGN1ZGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWwub3BlbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IGV4Y2x1ZGVkRmlsZVBhdGg6IHN0cmluZyB8IG51bGw7XG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ1JlbW92ZSBmcm9tIGV4Y2x1ZGVkIGZpbGVzJylcbiAgICAgICAgICAgIC5zZXREZXNjKCdSZW1vdmUgYSBmaWxlIGZyb20gdGhlIGxpc3Qgb2YgZXhjbHVkZWQgZmlsZXMuJylcbiAgICAgICAgICAgIC5hZGREcm9wZG93bihhc3luYyAoZHJvcGRvd246IERyb3Bkb3duQ29tcG9uZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgZHJvcGRvd24uYWRkT3B0aW9uKFwiX19zZWxlY3RcIiwgXCJTZWxlY3RcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZXhjbHVkZWRGaWxlUGF0aHMuZm9yRWFjaCgoZXhjbHVkZWRGaWxlUGF0aCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi5hZGRPcHRpb24oZXhjbHVkZWRGaWxlUGF0aC5wYXRoLCBleGNsdWRlZEZpbGVQYXRoLnBhdGgpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgZHJvcGRvd24ub25DaGFuZ2UoYXN5bmMgKGN1cnJlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQgIT0gJ19fc2VsZWN0JylcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2x1ZGVkRmlsZVBhdGggPSBjdXJyZW50O1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBleGNsdWRlZEZpbGVQYXRoID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYWRkRXh0cmFCdXR0b24oKGJ1dHRvbjogQnV0dG9uQ29tcG9uZW50KTogQnV0dG9uQ29tcG9uZW50ID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgYiA9IGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAuc2V0VG9vbHRpcChcIlJlbW92ZVwiKVxuICAgICAgICAgICAgICAgICAgICAuc2V0SWNvbihcInRyYXNoXCIpXG4gICAgICAgICAgICAgICAgICAgIC5vbkNsaWNrKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChleGNsdWRlZEZpbGVQYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1vZGFsID0gbmV3IERlbGV0ZU1vZGFsKHRoaXMuYXBwLCBgQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIHJlbW92ZSAnJHtleGNsdWRlZEZpbGVQYXRofScgZnJvbSB0aGUgbGlzdCBvZiBleGNsdWRlZCBmaWxlcy9wYXRocz9gKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsLm9uQ2xvc2UgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtb2RhbC5zYXZlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnBsdWdpbi5zZXR0aW5ncy5leGNsdWRlZEZpbGVQYXRocy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5leGNsdWRlZEZpbGVQYXRoc1tpXS5wYXRoID09PSBleGNsdWRlZEZpbGVQYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmV4Y2x1ZGVkRmlsZVBhdGhzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoYE1hdGhMaW5rczogJyR7ZXhjbHVkZWRGaWxlUGF0aH0nIHJlbW92ZWQgZnJvbSBleGNsdWRlZCBmaWxlc2ApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWwub3BlbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdNYXRoTGlua3M6IFBsZWFzZSBzZWxlY3QgYSBmaWxlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxufVxuXG5jbGFzcyBBZGRUZW1wbGF0ZXNNb2RhbCBleHRlbmRzIE1vZGFsIHtcbiAgICBzYXZlZDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHByb2NlZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIHRpdGxlOiBzdHJpbmcgPSAnJztcbiAgICByZXBsYWNlZDogc3RyaW5nID0gJyc7XG4gICAgcmVwbGFjZW1lbnQ6IHN0cmluZyA9ICcnO1xuICAgIGdsb2JhbE1hdGNoOiBib29sZWFuID0gdHJ1ZTtcbiAgICBzZW5zaXRpdmU6IGJvb2xlYW4gPSB0cnVlO1xuICAgIHdvcmQ6IGJvb2xlYW4gPSB0cnVlXG5cbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCkge1xuICAgICAgICBzdXBlcihhcHApO1xuICAgIH1cblxuICAgIG9uT3BlbigpIHtcbiAgICAgICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XG4gICAgICAgIGNvbnRlbnRFbC5lbXB0eSgpO1xuXG4gICAgICAgIGxvYWRUZW1wbGF0ZVNldHRpbmdzKGNvbnRlbnRFbCwgdGhpcyk7XG4gICAgICAgIGxvYWRCdXR0b25zVG9DbG9zZSh0aGlzLCB0aGlzLmNvbnRlbnRFbC5jcmVhdGVEaXYoKSwgdHJ1ZSwgJ0FkZCcsICdjaGVja21hcmsnLCAnQ2FuY2VsJywgJ2Nyb3NzJyk7XG4gICAgfVxufVxuXG5jbGFzcyBFZGl0VGVtcGxhdGVzTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG4gICAgc2F2ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBwcm9jZWVkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICB0ZW1wbGF0ZVRpdGxlOiBzdHJpbmc7XG4gICAgdGVtcGxhdGVzOiBzdHJpbmdbXTtcblxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCB0ZW1wbGF0ZVRpdGxlOiBzdHJpbmcsIHRlbXBsYXRlczogc3RyaW5nW10pIHtcbiAgICAgICAgc3VwZXIoYXBwKTtcbiAgICAgICAgdGhpcy50ZW1wbGF0ZVRpdGxlID0gdGVtcGxhdGVUaXRsZTtcbiAgICAgICAgdGhpcy50ZW1wbGF0ZXMgPSB0ZW1wbGF0ZXM7XG4gICAgfVxuXG4gICAgb25PcGVuKCkge1xuICAgICAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcbiAgICAgICAgY29udGVudEVsLmVtcHR5KCk7XG5cbiAgICAgICAgdGhpcy50ZW1wbGF0ZXMuZXZlcnkoKHRlbXBsYXRlKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy50ZW1wbGF0ZVRpdGxlICE9IHVuZGVmaW5lZCAmJiB0ZW1wbGF0ZS50aXRsZSA9PSB0aGlzLnRlbXBsYXRlVGl0bGUpIHtcbiAgICAgICAgICAgICAgICBsb2FkVGVtcGxhdGVTZXR0aW5ncyhjb250ZW50RWwsIHRlbXBsYXRlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSlcblxuICAgICAgICBsb2FkQnV0dG9uc1RvQ2xvc2UodGhpcywgdGhpcy5jb250ZW50RWwuY3JlYXRlRGl2KCksIHRydWUsICdTYXZlJywgJ2NoZWNrbWFyaycsICdDYW5jZWwnLCAnY3Jvc3MnKTtcbiAgICB9XG59XG5cbmNsYXNzIEFkZEV4Y2x1ZGVkTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG4gICAgc2F2ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBwcm9jZWVkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBleGNsdWRlZEZpbGVQYXRoOiBzdHJpbmc7XG4gICAgaXNGaWxlOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHApIHtcbiAgICAgICAgc3VwZXIoYXBwKTtcbiAgICB9XG5cbiAgICBvbk9wZW4oKSB7XG4gICAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuICAgICAgICBjb250ZW50RWwuZW1wdHkoKTtcblxuICAgICAgICBsZXQgZXhjbHVkZWRGaWxlUGF0aFRleHQ6IFRleHRDb21wb25lbnQ7XG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdGaWxlIG5hbWUvcGF0aCBvZiBmb2xkZXInKVxuICAgICAgICAgICAgLnNldERlc2MoXG4gICAgICAgICAgICAgICAgY3JlYXRlRnJhZ21lbnQoKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZS5jcmVhdGVTcGFuKHt0ZXh0OiAnRW50ZXIgYSBmaWxlIGFzJ30pO1xuICAgICAgICAgICAgICAgICAgICBlLmNyZWF0ZUVsKCdjb2RlJywge3RleHQ6ICdwYXRoL25hbWUubWQnfSk7XG4gICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlU3Bhbih7dGV4dDogJyBhbmQgYSBmb2xkZXIgYXMgJ30pO1xuICAgICAgICAgICAgICAgICAgICBlLmNyZWF0ZUVsKCdjb2RlJywge3RleHQ6ICdwYXRoJ30pO1xuICAgICAgICAgICAgICAgICAgICBlLmNyZWF0ZVNwYW4oe3RleHQ6ICcuJ30pO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuYWRkVGV4dCgodGV4dCkgPT4ge1xuICAgICAgICAgICAgICAgIGV4Y2x1ZGVkRmlsZVBhdGhUZXh0ID0gdGV4dDtcbiAgICAgICAgICAgICAgICBsZXQgZm9vdGVyRWwgPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVEaXYoKTtcbiAgICAgICAgICAgICAgICBsb2FkQnV0dG9uc1RvQ2xvc2UodGhpcywgZm9vdGVyRWwsIHRoaXMucHJvY2VlZCwgJ0FkZCcsICdjaGVja21hcmsnLCAnQ2FuY2VsJywgJ2Nyb3NzJyk7XG4gICAgICAgICAgICAgICAgZXhjbHVkZWRGaWxlUGF0aFRleHRcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKGV4Y2x1ZGVkRmlsZVBhdGhUZXh0KVxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoKGN1cnJlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmaWxlID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChjdXJyZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmV4Y2x1ZGVkRmlsZVBhdGggPSBmaWxlLnBhdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0ZpbGUgPSBmaWxlIGluc3RhbmNlb2YgVEZpbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9jZWVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9jZWVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBmb290ZXJFbC5lbXB0eSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9hZEJ1dHRvbnNUb0Nsb3NlKHRoaXMsIGZvb3RlckVsLCB0aGlzLnByb2NlZWQsICdBZGQnLCAnY2hlY2ttYXJrJywgJ0NhbmNlbCcsICdjcm9zcycpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbn1cblxuY2xhc3MgRGVsZXRlTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG4gICAgc2F2ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBwcm9jZWVkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBhcmVZb3VTdXJlOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgYXJlWW91U3VyZTogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKGFwcCk7XG4gICAgICAgIHRoaXMuYXJlWW91U3VyZSA9IGFyZVlvdVN1cmU7XG4gICAgfVxuXG4gICAgb25PcGVuKCkge1xuICAgICAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcbiAgICAgICAgY29udGVudEVsLmVtcHR5KCk7XG5cbiAgICAgICAgY29udGVudEVsLmNyZWF0ZUVsKCdoMycsIHt0ZXh0OiB0aGlzLmFyZVlvdVN1cmV9KTtcbiAgICAgICAgbG9hZEJ1dHRvbnNUb0Nsb3NlKHRoaXMsIHRoaXMuY29udGVudEVsLmNyZWF0ZURpdigpLCB0cnVlLCAnWWVzJywgJ2NoZWNrbWFyaycsICdObycsICdjcm9zcycpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gbG9hZFRlbXBsYXRlU2V0dGluZ3MoY29udGVudEVsOiBIVE1MRWxlbWVudCwgdGVtcGxhdGU6IG9iamVjdCkge1xuICAgIGxldCB0aXRsZVRleHQ6IFRleHRDb21wb25lbnQ7XG4gICAgbmV3IFNldHRpbmcoY29udGVudEVsKVxuICAgICAgICAuc2V0TmFtZSgnVGl0bGUnKVxuICAgICAgICAuc2V0RGVzYygnTmFtZSBvZiB0aGUgdGVtcGxhdGUuJylcbiAgICAgICAgLmFkZFRleHQoKHRleHQpID0+IHtcbiAgICAgICAgICAgIHRpdGxlVGV4dCA9IHRleHQ7XG4gICAgICAgICAgICB0aXRsZVRleHQuc2V0VmFsdWUodGVtcGxhdGUudGl0bGUpLm9uQ2hhbmdlKChjdXJyZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGUudGl0bGUgPSBjdXJyZW50O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgbGV0IHJlcGxhY2VkVGV4dDogVGV4dENvbXBvbmVudDtcbiAgICBuZXcgU2V0dGluZyhjb250ZW50RWwpXG4gICAgICAgIC5zZXROYW1lKCdNYXRjaCBmb3IuLi4nKVxuICAgICAgICAuc2V0RGVzYygnU3RyaW5nIHRvIGJlIG1hdGNoZWQgYW5kIHJlcGxhY2VkLiBEbyBub3QgaW5jbHVkZSByZWdleC4nKVxuICAgICAgICAuYWRkVGV4dCgodGV4dCkgPT4ge1xuICAgICAgICAgICAgcmVwbGFjZWRUZXh0ID0gdGV4dDtcbiAgICAgICAgICAgIHJlcGxhY2VkVGV4dC5zZXRWYWx1ZSh0ZW1wbGF0ZS5yZXBsYWNlZCkub25DaGFuZ2UoKGN1cnJlbnQpID0+IHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZS5yZXBsYWNlZCA9IGN1cnJlbnQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICBsZXQgcmVwbGFjZW1lbnRUZXh0OiBUZXh0Q29tcG9uZW50O1xuICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcbiAgICAgICAgLnNldE5hbWUoJ1JlcGxhY2Ugd2l0aC4uLicpXG4gICAgICAgIC5zZXREZXNjKCdTdHJpbmcgdG8gcmVwbGFjZSBtYXRjaGVzLiBEbyBub3QgZXNjYXBlIGJhY2tzbGFzaGVzLicpXG4gICAgICAgIC5hZGRUZXh0KCh0ZXh0KSA9PiB7XG4gICAgICAgICAgICByZXBsYWNlbWVudFRleHQgPSB0ZXh0O1xuICAgICAgICAgICAgcmVwbGFjZW1lbnRUZXh0LnNldFZhbHVlKHRlbXBsYXRlLnJlcGxhY2VtZW50KS5vbkNoYW5nZSgoY3VycmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlLnJlcGxhY2VtZW50ID0gY3VycmVudDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcbiAgICAgICAgLnNldE5hbWUoJ0dsb2JhbCBtYXRjaCcpXG4gICAgICAgIC5zZXREZXNjKCdNYXRjaCBhbGwgaW5zdGFuY2VzIChpbnN0ZWFkIG9mIGp1c3QgdGhlIGZpcnN0KS4nKVxuICAgICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+IHtcbiAgICAgICAgICAgIHRvZ2dsZS5zZXRWYWx1ZSh0ZW1wbGF0ZS5nbG9iYWxNYXRjaCkub25DaGFuZ2UoKGN1cnJlbnQpID0+ICh0ZW1wbGF0ZS5nbG9iYWxNYXRjaCA9IGN1cnJlbnQpKTtcbiAgICAgICAgfSk7XG5cbiAgICBuZXcgU2V0dGluZyhjb250ZW50RWwpXG4gICAgICAgIC5zZXROYW1lKCdDYXNlIHNlbnNpdGl2ZScpXG4gICAgICAgIC5zZXREZXNjKCdNYXRjaGVzIHdpbGwgYmUgY2FzZSBzZW5zaXRpdmUuJylcbiAgICAgICAgLmFkZFRvZ2dsZSgodG9nZ2xlKSA9PiB7XG4gICAgICAgICAgICB0b2dnbGUuc2V0VmFsdWUodGVtcGxhdGUuc2Vuc2l0aXZlKS5vbkNoYW5nZSgoY3VycmVudCkgPT4gKHRlbXBsYXRlLnNlbnNpdGl2ZSA9IGN1cnJlbnQpKTtcbiAgICAgICAgfSk7XG5cbiAgICBuZXcgU2V0dGluZyhjb250ZW50RWwpXG4gICAgICAgIC5zZXROYW1lKCdNYXRjaCB3aG9sZSB3b3JkcycpXG4gICAgICAgIC5zZXREZXNjKCdPbmx5IG1hdGNoIHdob2xlIHdvcmRzLicpXG4gICAgICAgIC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT4ge1xuICAgICAgICAgICAgdG9nZ2xlLnNldFZhbHVlKHRlbXBsYXRlLndvcmQpLm9uQ2hhbmdlKChjdXJyZW50KSA9PiAodGVtcGxhdGUud29yZCA9IGN1cnJlbnQpKTtcbiAgICAgICAgfSk7XG59XG5cbmZ1bmN0aW9uIGxvYWRCdXR0b25zVG9DbG9zZShtb2RhbDogTW9kYWwsIGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBwcm9jZWVkOiBib29sZWFuLCB0cnVlVG9vbFRpcDogc3RyaW5nLCB0cnVlSWNvbjogc3RyaW5nLCBmYWxzZVRvb2xUaXA6IHN0cmluZywgZmFsc2VJY29uOiBzdHJpbmcpIHtcbiAgICBsZXQgZm9vdGVyQnV0dG9ucyA9IG5ldyBTZXR0aW5nKGVsZW1lbnQpO1xuICAgIGZvb3RlckJ1dHRvbnMuYWRkQnV0dG9uKChiKSA9PiB7XG4gICAgICAgIGIuc2V0VG9vbHRpcCh0cnVlVG9vbFRpcClcbiAgICAgICAgICAgIC5zZXRJY29uKHRydWVJY29uKVxuICAgICAgICAgICAgLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghcHJvY2VlZCkge1xuICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdNYXRoTGlua3M6IFBsZWFzZSBlbnRlciBhIHZhbGlkIHBhdGgvZmlsZScpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG1vZGFsLnNhdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgbW9kYWwuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBmb290ZXJCdXR0b25zLmFkZEV4dHJhQnV0dG9uKChiKSA9PiB7XG4gICAgICAgIGIuc2V0VG9vbHRpcChmYWxzZVRvb2xUaXApXG4gICAgICAgICAgICAuc2V0SWNvbihmYWxzZUljb24pXG4gICAgICAgICAgICAub25DbGljayhhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbW9kYWwuc2F2ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBtb2RhbC5jbG9zZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgfSk7XG59XG4iLCAiaW1wb3J0IHsgVEZpbGUgfSBmcm9tICdvYnNpZGlhbic7XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRSZWdleChzdHI6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHN0clxuICAgICAgICAucmVwbGFjZSgvXFxzL2csICdcXFxccycpXG4gICAgICAgIC5yZXBsYWNlKC9cXC4vZywgJ1xcXFwuJylcbiAgICAgICAgLnJlcGxhY2UoL1xcKC9nLCAnXFxcXCgnKVxuICAgICAgICAucmVwbGFjZSgvXFwpL2csICdcXFxcKScpXG4gICAgICAgIC5yZXBsYWNlKC9cXHsvZywgJ1xcXFx7JylcbiAgICAgICAgLnJlcGxhY2UoL1xcfS9nLCAnXFxcXH0nKVxuICAgICAgICAucmVwbGFjZSgvXFxbL2csICdcXFxcWycpXG4gICAgICAgIC5yZXBsYWNlKC9cXF0vZywgJ1xcXFxdJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0V4Y2x1ZGVkKGZpbGU6IFRGaWxlLCBleGNsdWRlZEZpbGVQYXRoczogc3RyaW5nW10pOiBib29sZWFuIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV4Y2x1ZGVkRmlsZVBhdGhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBwYXRoID0gZXhjbHVkZWRGaWxlUGF0aHNbaV07XG4gICAgICAgIGlmIChwYXRoLmlzRmlsZSAmJiBmaWxlLnBhdGggPT09IHBhdGgucGF0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoIXBhdGguaXNGaWxlKSB7XG4gICAgICAgICAgICBsZXQgcGF0aFJlZ2V4ID0gbmV3IFJlZ0V4cChgXFxcXGIke3BhdGgucGF0aH0vYCk7XG4gICAgICAgICAgICBpZiAocGF0aFJlZ2V4LnRlc3QoZmlsZS5wYXRoKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbmNsdWRlZE5vdGVzKGFsbE5vdGVzOiBURmlsZVtdLCBleGNsdWRlZEZpbGVQYXRoczogc3RyaW5nW10pOiBURmlsZVtdIHtcbiAgICBsZXQgYWxsSW5jbHVkZWROb3RlczogVEZpbGVbXSA9IFtdO1xuICAgIGFsbE5vdGVzLmZvckVhY2goKG5vdGUpID0+IHtcbiAgICAgICAgaWYgKCFpc0V4Y2x1ZGVkKG5vdGUsIGV4Y2x1ZGVkRmlsZVBhdGhzKSlcbiAgICAgICAgICAgIGFsbEluY2x1ZGVkTm90ZXMucHVzaChub3RlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYWxsSW5jbHVkZWROb3Rlcztcbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSx1QkFBbUM7OztBQ0FuQyxzQkFBa0c7QUFRM0YsSUFBTSxtQkFBc0M7QUFBQSxFQUMvQyxXQUFXLENBQUM7QUFBQSxFQUNaLG1CQUFtQixDQUFDO0FBQUEsRUFDcEIsWUFBWTtBQUNoQjtBQUVPLElBQU0sc0JBQU4sY0FBa0MsaUNBQWlCO0FBQUEsRUFHdEQsWUFBWSxNQUFVLFFBQW1CO0FBQ3JDLFVBQU0sTUFBSyxNQUFNO0FBQ2pCLFNBQUssU0FBUztBQUFBLEVBQ2xCO0FBQUEsRUFFQSxBQUFNLFVBQWdCO0FBQUE7QUFDbEIsWUFBTSxFQUFFLGdCQUFnQjtBQUV4QixrQkFBWSxNQUFNO0FBQ2xCLGtCQUFZLFNBQVMsTUFBTSxFQUFDLE1BQU0scUJBQW9CLENBQUM7QUFFdkQsVUFBSSx3QkFBUSxXQUFXLEVBQ2xCLFFBQVEsc0JBQXNCLEVBQzlCLFFBQVEsK0RBQStELEVBQ3ZFLFVBQVUsQ0FBQyxXQUFXO0FBQUMsZUFDbkIsU0FBUyxLQUFLLE9BQU8sU0FBUyxVQUFVLEVBQ3hDLFNBQVMsQ0FBTyxZQUFZO0FBQ3pCLGVBQUssT0FBTyxTQUFTLGFBQWE7QUFDbEMsZ0JBQU0sS0FBSyxPQUFPLGFBQWE7QUFBQSxRQUNuQyxFQUFDO0FBQUEsTUFDTCxDQUFDO0FBRUwsVUFBSSx3QkFBUSxXQUFXLEVBQ2xCLFFBQVEsb0JBQW9C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
