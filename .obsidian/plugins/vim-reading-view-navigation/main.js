/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
If you want to view the source, visit the pluginâ€™s github repository:
https://github.com/kometenstaub/obsidian-vim-reading-view-navigation
It is MIT-licensed:
	MIT License
	
	Copyright (c) 2022 kometenstaub and contributors
	
	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
	
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => VimReadingViewNavigation
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = { scrollDifference: 1 };
var VimReadingViewNavigation = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new VimScrollSettingTab(this.app, this));
    this.navScope = new import_obsidian.Scope(app.scope);
    this.navScope.register([], "j", (evt) => {
      const leaf = app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (leaf.getMode() === "preview" && this.displayValue(leaf) === "none") {
        this.scrollDown(leaf);
        return false;
      }
      return true;
    });
    this.navScope.register([], "k", (evt) => {
      const leaf = app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (leaf.getMode() === "preview" && this.displayValue(leaf) === "none") {
        this.scrollUp(leaf);
        return false;
      }
      return true;
    });
    this.navScope.register([], "g", (evt) => {
      const leaf = app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (leaf.getMode() === "preview" && this.displayValue(leaf) === "none" && evt.key === "g") {
        this.scrollTop(leaf);
        return false;
      }
      return true;
    });
    this.navScope.register([], "g", (evt) => {
      const leaf = app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (leaf.getMode() === "preview" && this.displayValue(leaf) === "none" && evt.key === "G") {
        this.scrollBottom(leaf);
        return false;
      }
      return true;
    });
    this.navScope.register(["Shift"], "g", (evt) => {
      const leaf = app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (leaf.getMode() === "preview" && this.displayValue(leaf) === "none") {
        this.scrollBottom(leaf);
        return false;
      }
      return true;
    });
    app.keymap.pushScope(this.navScope);
    console.log("Vim Reading View Navigation loaded.");
  }
  displayValue(leaf) {
    return leaf.contentEl.getElementsByClassName("markdown-reading-view")[0].getElementsByClassName("document-search-container")[0].getCssPropertyValue("display");
  }
  async onunload() {
    app.keymap.popScope(this.navScope);
    console.log("Vim Reading View Navigation unloaded.");
  }
  getScroll(leaf) {
    return leaf.previewMode.getScroll();
  }
  scrollDown(leaf) {
    const scroll = this.getScroll(leaf);
    leaf.previewMode.applyScroll(scroll + this.settings.scrollDifference);
  }
  scrollUp(leaf) {
    const scroll = this.getScroll(leaf);
    leaf.previewMode.applyScroll(scroll - this.settings.scrollDifference);
  }
  scrollTop(leaf) {
    leaf.previewMode.applyScroll(0);
  }
  scrollBottom(leaf) {
    let scroll = this.getScroll(leaf);
    leaf.previewMode.applyScroll(scroll + this.settings.scrollDifference);
    let newScroll = this.getScroll(leaf);
    while (newScroll != scroll) {
      scroll = this.getScroll(leaf);
      leaf.previewMode.applyScroll(scroll + this.settings.scrollDifference);
      newScroll = this.getScroll(leaf);
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var VimScrollSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    const { settings } = this.plugin;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Vim Reading View Navigation" });
    new import_obsidian.Setting(containerEl).setName("Scroll amount").setDesc("It must be greater than 0.").addText((text) => {
      text.setPlaceholder("Enter a number greater than 0. Default: 1").setValue(settings.scrollDifference.toString()).onChange(async (value) => {
        const num = Number.parseInt(value);
        if (Number.isInteger(num) && num > 0) {
          settings.scrollDifference = num;
          await this.plugin.saveSettings();
        } else {
          new import_obsidian.Notice("Please enter an integer greater than 0.");
        }
      });
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
